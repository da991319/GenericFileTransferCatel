<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catel.MVVM</name>
    </assembly>
    <members>
        <member name="T:Catel.Environment">
            <summary>
            Class containing environment information.
            </summary>
        </member>
        <member name="F:Catel.Environment.DefaultMultiLingualDependencyPropertyValue">
            <summary>
            The default value for dependency properties that use a Properties.Resources value. Such values should be set in the constructor
            of the control instead of the dependency property to allow runtime switching of languages.
            </summary>
        </member>
        <member name="F:Catel.Environment.DefaultBindingFlags">
            <summary>
            The default binding flags to use for reflection within Catel.
            </summary>
        </member>
        <member name="P:Catel.Environment.IsInDesignMode">
            <summary>
            Gets or sets a value indicating whether the environment is currently in design mode.
            </summary>
            <value>
            	<c>true</c> if the environment is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Environment.BypassDevEnvCheck">
            <summary>
            Gets or sets a value indicating whether the "devenv.exe" check should be bypassed. By default, the <see cref="P:Catel.Environment.IsInDesignMode"/>
            also checks whether the current process is "devenv.exe".
            <para/>
            This behavior is not very useful when using Catel in Visual Studio extensions, so it is possible to bypass that specific check.
            </summary>
            <value><c>true</c> if the check should be bypassed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Environment.DisablePropertyChangeNotifications">
            <summary>
            Gets or sets a value indicating whether property change notifications are currently disabled for all instances.
            </summary>
            <value><c>true</c> if property change notifications should be disabled for all instances; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.AsynchronousCommand`2">
            <summary>
            Command that allows an action to be exceuted asynchronous. This way, it can be canceled and will not block the
            UI thread.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
        </member>
        <member name="T:Catel.MVVM.Command`2">
            <summary>
            Class to implement commands in the <see cref="T:Catel.MVVM.ViewModelBase"/>.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>
        </member>
        <member name="T:Catel.MVVM.ICatelCommand">
            <summary>
            Advanced <see cref="T:System.Windows.Input.ICommand"/> interface definition to provide advanced functionality.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand.CanExecute">
            <summary>
            Invokes the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> with <c>null</c> as parameter.
            </summary>
            <returns>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand.Execute">
            <summary>
            Invokes the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> with <c>null</c> as parameter.
            </summary>
            <returns>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Catel.MVVM.ICatelCommand.Tag">
            <summary>
            Gets the tag for this command. A tag is a way to link any object to a command so you can use your own
            methods to recognize the commands, for example by ID or string.
            <para />
            By default, the value is <c>null</c>.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="E:Catel.MVVM.ICatelCommand.Executed">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Command`2._subscribedEventHandlers">
            <summary>
            List of subscribed event handlers so the commands can be unsubscribed upon disposing.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Action,System.Func{`1,System.Boolean},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="executeWithParameter">The action to execute with parameter.</param>
            <param name="executeWithoutParameter">The action to execute without parameter.</param>
            <param name="canExecuteWithParameter">The function to call to determine wether the command can be executed with parameter.</param>
            <param name="canExecuteWithoutParameter">The function to call to determine wether the command can be executed without parameter.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Catel.MVVM.Command`2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            	<c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Not a default parameter value because the <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> has no default parameter value.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(`1)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <remarks>
            Not a default parameter value because the <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> has no default parameter value.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(`0,System.Boolean)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <param name="ignoreCanExecuteCheck">if set to <c>true</c>, the check on <see cref="M:Catel.MVVM.Command`2.CanExecute"/> will be used before actually executing the action.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseExecuted(System.Object)">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.Executed"/> event.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="E:Catel.MVVM.Command`2.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Command`2.Executed">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Command`2.Tag">
            <summary>
            Gets the tag for this command. A tag is a way to link any object to a command so you can use your own
            methods to recognize the commands, for example by ID or string.
            <para/>
            By default, the value is <c>null</c>.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="F:Catel.MVVM.AsynchronousCommand`2._isExecuting">
            <summary>
            Flag indicating that the command is executing.
            </summary>
        </member>
        <member name="F:Catel.MVVM.AsynchronousCommand`2._isCancelationRequested">
            <summary>
            Flag indicated that cancelation has been requested.
            </summary>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.#ctor(System.Action{`0},System.Action,System.Func{`1,System.Boolean},System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="executeWithParameter">The action to execute with parameter.</param>
            <param name="executeWithoutParameter">The action to execute without parameter.</param>
            <param name="canExecuteWithParameter">The function to call to determine wether the command can be executed with parameter.</param>
            <param name="canExecuteWithoutParameter">The function to call to determine wether the command can be executed without parameter.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.ReportProgress(System.Action)">
            <summary>
            Reports progress on the UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`2.Execute(`0,System.Boolean)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <param name="ignoreCanExecuteCheck">if set to <c>true</c>, the check on <see cref="!:Command.CanExecute()"/> will be used before actually executing the action.</param>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.IsExecuting">
            <summary>
            Gets or sets a value indicating whether this instance is executing.
            </summary>
            <value>
            	<c>true</c> if this instance is executing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.IsCancelationRequested">
            <summary>
            Gets or sets a value indicating whether this instance is cancelation requested.
            </summary>
            <value>
            	<c>true</c> if this instance is cancelation requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.ShouldCancel">
            <summary>
            Gets a value indicating whether the command should cancel itself.
            </summary>
            <value>
              <c>true</c> if the command should be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.AsynchronousCommand`2.CancelCommand">
            <summary>
            Gets the cancel command.
            </summary>
        </member>
        <member name="E:Catel.MVVM.AsynchronousCommand`2.Executing">
            <summary>
            Occurs when the command is about to execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.AsynchronousCommand`2.Canceled">
            <summary>
            Occurs when the command is canceled.
            </summary>
        </member>
        <member name="T:Catel.MVVM.AsynchronousCommand`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class with only the <typeparamref name="TExecuteParameter"/> 
            as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`1.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.AsynchronousCommand">
            <summary>
            Implements the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class with <see cref="T:System.Object"/> as generic types.
            </summary>
        </member>
        <member name="M:Catel.MVVM.AsynchronousCommand.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.AsynchronousCommand`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.CommandCanceledEventArgs">
            <summary>
            CommandCanceledEventArgs, just like above but allows the event to 
            be cancelled.
            </summary>
        </member>
        <member name="T:Catel.MVVM.CommandEventArgs">
            <summary>
            CommandEventArgs, simply holds the command parameter.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandEventArgs"/> class.
            </summary>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="P:Catel.MVVM.CommandEventArgs.CommandParameter">
            <summary>
            Gets the command parameter used for the execution.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="M:Catel.MVVM.CommandCanceledEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandCanceledEventArgs"/> class.
            </summary>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="P:Catel.MVVM.CommandCanceledEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Catel.MVVM.CommandCanceledEventArgs"/> command should be cancelled.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.IUrlLocator">
            <summary>
            Resolver that will resolve view types based on the view model type. For example, if a view model with the type
            name <c>MyAssembly.ViewModels.PersonViewModel</c> is inserted, this could result in the view type
            <c>MyAssembly.Views.PersonView</c>.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ILocator">
            <summary>
            Interface defining shared information about locators. This way, any locator can be casted
            to this interface and be used to locate something by naming convention.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ILocator.ClearCache">
            <summary>
            Clears the cache of the resolved naming conventions.
            </summary>
            <remarks>
            Note that clearing the cache will also clear all manually registered types
            registered via the <c>Register</c> method.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.ILocator.NamingConventions">
            <summary>
            Gets or sets the naming conventions to use to locate types.
            <para/>
            By adding or removing conventions to this property, the service can use custom resolving of types.
            <para/>
            Each implementation should add its own default naming convention.
            </summary>
            <value>The naming conventions.</value>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IUrlLocator.Register(System.Type,System.String)">
            <summary>
            Registers the specified url in the local cache. This cache will also be used by the <see cref="M:Catel.MVVM.IUrlLocator.ResolveUrl(System.Type,System.Boolean)"/>
            method.
            </summary>
            <param name="viewModelType">The view model to resolve the url for.</param>
            <param name="url">The resolved url.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="url"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.IUrlLocator.ResolveUrl(System.Type,System.Boolean)">
            <summary>
            Resolves an url by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the url for.</param>
            <param name="ensurePageExists">if set to <c>true</c>, the method checks whether the page resource actually exists.</param>
            <returns>The resolved viurlew or <c>null</c> if the view could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.IViewLocator">
            <summary>
            Resolver that will resolve view types based on the view model type. For example, if a view model with the type
            name <c>MyAssembly.ViewModels.PersonViewModel</c> is inserted, this could result in the view type
            <c>MyAssembly.Views.PersonView</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view in the local cache. This cache will also be used by the 
            <see cref="M:Catel.MVVM.IViewLocator.ResolveView(System.Type)"/> method.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewType">Type of the view.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewLocator.ResolveView(System.Type)">
            <summary>
            Resolves a view type by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the view for.</param>
            <returns>The resolved view or <c>null</c> if the view could not be resolved.</returns>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.LocatorBase">
            <summary>
            Base class for all locators. This class implements the shared logic so only custom logic has to
            be implemented by new locator classes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.LocatorBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)">
            <summary>
            Registers the specified type in the local cache. This cache will also be used by the <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/>
            method.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <param name="resolvedValue">The resolved value.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="resolvedValue"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.Resolve(System.String)">
            <summary>
            Resolves the specified value to resolve. It uses both the <see cref="P:Catel.MVVM.LocatorBase.NamingConventions"/> and the manually registered
            values registered via the <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/> method to resolve the value.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <returns>The resolved value or <c>null</c> if the value could not be resolved.</returns>
            <remarks>
            This method can be overriden to implement custom behavior. Don't forget to register the value using the 
            <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/> method if the result should be cached in a custom implementation.
            <para/>
            By default, this value will assume the <paramref name="valueToResolve"/> is a type and will cast it as so. If the 
            <paramref name="valueToResolve"/> is not a type, override this method and register the result using the <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/>
            method manually.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.GetItemFromCache(System.String)">
            <summary>
            Gets the item from the cache.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <returns>The item or <c>null</c> if the item was not found in the cache.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.AddItemToCache(System.String,System.String)">
            <summary>
            Adds the item to the cache.
            </summary>
            <param name="valueToResolve">The value to resolve.</param>
            <param name="resolvedValue">The resolved value.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="valueToResolve"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.ClearCache">
            <summary>
            Clears the cache of the resolved naming conventions.
            </summary>
            <remarks>
            Note that clearing the cache will also clear all manually registered values registered via the 
            <see cref="M:Catel.MVVM.LocatorBase.Register(System.String,System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.GetTypeFromString(System.String)">
            <summary>
            Gets the type from string. This is a helper method to easily 
            </summary>
            <param name="fullTypeName">Full name of the type.</param>
            <returns>The resolved type or <c>null</c> if the type could not be resolved.</returns>
            <remarks>
            Internally, this method uses <see cref="M:Catel.TypeHelper.GetType(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            Resolves a single naming convention.
            <para/>
            This method is abstract because each locator should or could use its own naming convention to resolve
            the type. The <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/> method has prepared all the values such as the assembly name and the
            only thing this method has to do is to actually resolve a string value based on the specified naming convention.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>The resolved naming convention.</returns>
        </member>
        <member name="M:Catel.MVVM.LocatorBase.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
        </member>
        <member name="P:Catel.MVVM.LocatorBase.NamingConventions">
            <summary>
            Gets or sets the naming conventions to use to locate types.
            <para/>
            By adding or removing conventions to this property, the service can use custom resolving of types.
            <para/>
            Each implementation should add its own default naming convention.
            </summary>
            <value>The naming conventions.</value>
            <remarks></remarks>
        </member>
        <member name="F:Catel.MVVM.UrlLocator.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.Register(System.Type,System.String)">
            <summary>
            Registers the specified url in the local cache. This cache will also be used by the <see cref="M:Catel.MVVM.UrlLocator.ResolveUrl(System.Type,System.Boolean)"/>
            method.
            </summary>
            <param name="viewModelType">The view model to resolve the url for.</param>
            <param name="url">The resolved url.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="url"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.ResolveUrl(System.Type,System.Boolean)">
            <summary>
            Resolves an url by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the url for.</param>
            <param name="ensurePageExists">if set to <c>true</c>, the method checks whether the page resource actually exists.</param>
            <returns>The resolved viurlew or <c>null</c> if the view could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Catel.MVVM.UrlLocator.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Catel.MVVM.ViewLocator">
            <summary>
            Resolver that will resolve view types based on the view model type. For example, if a view model with the type
            name <c>MyAssembly.ViewModels.PersonViewModel</c> is inserted, this could result in the view type
            <c>MyAssembly.Views.PersonView</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view in the local cache. This cache will also be used by the
            <see cref="M:Catel.MVVM.ViewLocator.ResolveView(System.Type)"/> method.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewType">Type of the view.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.ResolveView(System.Type)">
            <summary>
            Resolves a view type by the view model and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewModelType">Type of the view model to resolve the view for.</param>
            <returns>The resolved view or <c>null</c> if the view could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            Resolves a single naming convention.
            <para/>
            This method is abstract because each locator should or could use its own naming convention to resolve
            the type. The <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/> method has prepared all the values such as the assembly name and the
            only thing this method has to do is to actually resolve a string value based on the specified naming convention.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>The resolved naming convention.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewLocator.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
        </member>
        <member name="T:Catel.MVVM.Services.DispatcherService">
            <summary>
            Service that allows the retrieval of the UI dispatcher.
            </summary>
            <remarks>
            Internally, this service uses the <see cref="T:Catel.Windows.Threading.DispatcherHelper"/> class to retrieve the current dispatcher. If there is
            no current <see cref="T:System.Windows.Threading.Dispatcher"/>, the method will be invoked manually on the current thread.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Services.IDispatcherService">
            <summary>
            Service that allows the retrieval of the UI dispatcher.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IDispatcherService.Invoke(System.Action)">
            <summary>
            Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <remarks>
            For target frameworks where the <see cref="T:System.Windows.Threading.Dispatcher"/> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.IDispatcherService.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <remarks>
            For target frameworks where the <see cref="T:System.Windows.Threading.Dispatcher"/> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IDispatcherService.BeginInvoke(System.Action)">
            <summary>
            Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <remarks>
            For target frameworks where the <see cref="T:System.Windows.Threading.Dispatcher"/> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.IDispatcherService.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <remarks>
            If there is no dispatcher available (for example, during unit tests without UI), the method will be invoked immediately.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.DispatcherService.Invoke(System.Action)">
            <summary>
            Executes the specified action with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <remarks>
            For target frameworks where the <see cref="T:System.Windows.Threading.Dispatcher"/> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.DispatcherService.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <remarks>
            For target frameworks where the <see cref="T:System.Windows.Threading.Dispatcher"/> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.DispatcherService.BeginInvoke(System.Action)">
            <summary>
            Executes the specified action asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is <c>null</c>.</exception>
            <remarks>
            For target frameworks where the <see cref="T:System.Windows.Threading.Dispatcher"/> class does not contain the <c>Invoke</c> method, the <c>BeginInvoke</c>
            method will be used instead.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.DispatcherService.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously with the specified arguments on the thread that the Dispatcher was created on.
            </summary>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method. Can be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.SavingEventArgs">
            <summary>
            EventArgs for the <see cref="E:Catel.MVVM.IViewModel.Saving"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.SavingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.SavingEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.SavingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the save should be canceled.
            </summary>
            <value>
              <c>true</c> if the save should be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.ModelErrorInfo">
            <summary>
            Class containing all the errors and warnings retrieved via <see cref="T:System.ComponentModel.INotifyDataErrorInfo"/> and
            <see cref="T:System.ComponentModel.INotifyDataWarningInfo"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._fieldErrors">
            <summary>
            Gets the field errors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._fieldWarnings">
            <summary>
            Gets the field warnings.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._businessRuleErrors">
            <summary>
            Gets the business rule errors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ModelErrorInfo._businessRuleWarnings">
            <summary>
            Gets the business rule warnings.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelErrorInfo"/> class.
            </summary>
            <param name="model">The model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="model"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.OnModelErrorsChanged(System.Object,System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
            Called when the errors on the model have changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleBusinessRuleErrors(System.Collections.IEnumerable)">
            <summary>
            Handles the business rule errors.
            </summary>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleFieldErrors(System.String,System.Collections.IEnumerable)">
            <summary>
            Handles the field errors.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.OnModelWarningsChanged(System.Object,System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
            Called when the warnings on the model have changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleBusinessRuleWarnings(System.Collections.IEnumerable)">
            <summary>
            Handles the business rule warnings.
            </summary>
            <param name="warnings">The warnings.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.HandleFieldWarnings(System.String,System.Collections.IEnumerable)">
            <summary>
            Handles the field warnings.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="warnings">The warnings.</param>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.GetErrors(System.String)">
            <summary>
            Gets the errors for the specificied <paramref name="propertyName"/>.
            <para/>
            If the <paramref name="propertyName"/> is <c>null</c> or <see cref="F:System.String.Empty"/>,
            entity level errors will be returned.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of errors.</returns>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.GetWarnings(System.String)">
            <summary>
            Gets the warnings for the specificied <paramref name="propertyName"/>.
            <para/>
            If the <paramref name="propertyName"/> is <c>null</c> or <see cref="F:System.String.Empty"/>,
            entity level warnings will be returned.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of warnings.</returns>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.CleanUp">
            <summary>
            Cleans up the information by unsubscribing from all events.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelErrorInfo.GetValidationString(System.Object)">
            <summary>
            Gets the validation string from the object. This method supports the following types: <para />
            * string<para />
            * ValidationResult 
            </summary>
            <param name="obj">The object to convert to a string.</param>
            <returns>The string retrieved from the object or <c>null</c> if the object is not supported.</returns>
        </member>
        <member name="E:Catel.MVVM.ModelErrorInfo.Updated">
            <summary>
            Raised when the errors or warnings are updated.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ModelInfo">
            <summary>
            Class containing information about a specific model decorated with the <see cref="T:Catel.MVVM.ModelAttribute"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelInfo.#ctor(System.String,Catel.MVVM.ModelAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelInfo"/> class.
            </summary>
            <param name="name">The name of the model property.</param>
            <param name="attribute">The attribute.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="attribute"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ModelInfo.Name">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="P:Catel.MVVM.ModelInfo.SupportIEditableObject">
            <summary>
            Gets a value indicating whether the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.ViewModelBase">
            <summary>
            View model base for MVVM implementations. This class is based on the <see cref="T:Catel.Data.DataObjectBase"/>, and supports all
            common interfaces used by WPF.
            </summary>
            <remarks>This view model base does not add any services. The technique specific implementation should take care of that
            (such as WPF, Silverlight, etc).</remarks>
        </member>
        <member name="T:Catel.MVVM.IViewModel">
            <summary>
            View model interface.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.InitializeViewModel">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <remarks>
            It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IViewModel.ValidateViewModel(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelViewModel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelAndCloseViewModel">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveViewModel">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveAndCloseViewModel">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CloseViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.IViewModel.CancelViewModel"/> of <see cref="M:Catel.MVVM.IViewModel.SaveViewModel"/> method.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="P:Catel.MVVM.IViewModel.HasErrors">
            <summary>
            Gets a value indicating whether this instance has errors.
            </summary>
            <value>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.HasWarnings">
            <summary>
            Gets a value indicating whether this instance has warnings.
            </summary>
            <value>
            	<c>true</c> if this instance has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.HasDirtyModel">
            <summary>
            Gets a value indicating whether this instance has a dirty model.
            </summary>
            <value><c>true</c> if this instance has a dirty model; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed. If a view model is closed, calling
            <see cref="M:Catel.MVVM.IViewModel.CancelViewModel"/>, <see cref="M:Catel.MVVM.IViewModel.SaveViewModel"/> or <see cref="M:Catel.MVVM.IViewModel.CloseViewModel(System.Nullable{System.Boolean})"/>
            will have no effect.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.Title">
            <summary>
            Gets the title of the view model.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.UniqueIdentifier">
            <summary>
            Gets the unique identifier of the view model.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.ViewModelConstructionTime">
            <summary>
            Gets the view model construction time, which is used to get unique instances of view models.
            </summary>
            <value>The view model construction time.</value>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Saving">
            <summary>
            Occurs when the view model is about to be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Saved">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Canceling">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Canceled">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Closed">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UpdateNavigationContext(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the navigation context. The navigation context provided by this class is different
            from the <see cref="P:Catel.MVVM.ViewModelBase.NavigationContext"/>. Therefore, this method updates the navigation context
            to match it to the values of the <paramref name="navigationContext"/>.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted">
            <summary>
            Called when the navigation has completed.
            </summary>
            <remarks>
            This should of course be a cleaner solution, but there is no other way to let a view-model
            know that navigation has completed. Another option is injection, but this would require every
            view-model for Windows Phone 7 to accept only the navigation context, which has actually nothing
            to do with the logic.
            <para/>
            It is also possible to use the <see cref="E:Catel.MVVM.ViewModelBase.NavigationCompleted"/> event.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._metaData">
            <summary>
            Dictionary containing the view model metadata of a view model type so it has to be calculated only once.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._viewModelIdCounter">
            <summary>
            Counter for unique identifiers of a view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._ignoreMultipleModelsWarning">
            <summary>
            Value indicating whether the multiple modules warning should be ignored.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._isViewModelInitialized">
            <summary>
            Value indicating whether the view model is already initialized via a call to <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModel"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._areViewModelAttributesIntialized">
            <summary>
            Value indicating whher 
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._modelObjects">
            <summary>
            Dictionary of available models inside the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._modelObjectsInfo">
            <summary>
            Dictionary with info about the available models inside the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._modelErrorInfo">
            <summary>
            Dictionary with data error info about a specific model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._childViewModels">
            <summary>
            List of child view models which can be registed by the <see cref="M:Catel.MVVM.ViewModelBase.RegisterChildViewModel(Catel.MVVM.IViewModel)"/> method.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._childViewModelsHaveErrors">
            <summary>
            Value to determine whether child view models have errors or not.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.ViewModelManager">
            <summary>
            Gets the view model manager.
            </summary>
            <value>The view model manager.</value>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._viewModelToModelMap">
            <summary>
            Mappings from view model properties to models and their properties.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._validationSummaries">
            <summary>
            Dictionary of properties that are decorated with the <see cref="T:Catel.MVVM.ValidationToViewModelAttribute"/>. These properties should be
            updated after each validation sequence.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._registeredCommands">
            <summary>
            A list of commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/> interface.
            </summary>
            <remarks>
            Internal so the <see cref="F:Catel.MVVM.ViewModelBase.ViewModelManager"/> can subscribe to the commands. The string is the property name
            the command is registered with.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase._propertyDescriptors">
            <summary>
            The cached property descriptors. If the property is empty, the property descriptors are yet to be built. Otherwise
            this list can be used to return the cached property descriptors.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">
            if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.
            </param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(Catel.IoC.IServiceLocator,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows the injection of a custom <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <param name="serviceLocator">The service locator to inject. If <c>null</c>, the <see cref="P:Catel.IoC.ServiceLocator.Instance"/> will be used.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <param name="skipViewModelAttributesInitialization">if set to <c>true</c>, the initialization will be skipped and must be done manually via <see cref="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes"/>.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializePropertiesWithAttributes">
            <summary>
            Initializes the properties with attributes.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ValidateViewModelToModelMappings">
            <summary>
            Validates the view model to model mappings.
            </summary>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A property is mapped to a model that does not exists.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeViewModelAttributes">
            <summary>
            Initializes the view model attributes, such as the <see cref="T:Catel.MVVM.ModelAttribute"/> and
            <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/>.
            <para/>
            This method is automatically invoked by the constructor. Sometimes, dynamic properties
            are registered after the constructor. Therefore, it is possible to skip the initialization
            of the attributes and handle this manually.
            </summary>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">A mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">A mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.SetParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Sets the parent view model.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.RegisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Registers a child view model.
            </summary>
            <param name="child">The child view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="child"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnChildViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property has changed on the child view model.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnChildViewModelClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the child view model is closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UnregisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters the child view model.
            </summary>
            <param name="child">The child.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="child"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.GetAllModels">
            <summary>
            Gets all models that are decorated with the <see cref="T:Catel.MVVM.ModelAttribute"/>.
            </summary>
            <returns>Array of models.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UpdateExplicitViewModelToModelMappings">
            <summary>
            Updates the view model to model mappings that are defined as <see cref="F:Catel.MVVM.ViewModelToModelMode.Explicit"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Called when a property value is changing.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnPropertyChanged(Catel.Data.AdvancedPropertyChangedEventArgs)">
            <summary>
            Called when a property value has changed.
            </summary>
            <param name="e">The <see cref="T:Catel.Data.AdvancedPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnCommandExecuted(System.Object,Catel.MVVM.CommandExecutedEventArgs)">
            <summary>
            Called when an <see cref="T:Catel.MVVM.ICatelCommand"/> implementation has just been executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)">
            <summary>
            Called when a property has changed for a view model type that the current view model is interested in. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <remarks>
            This method is internal so the <see cref="T:Catel.MVVM.ManagedViewModel"/> can invoke it. This method is only used as a pass-through
            to the actual <see cref="M:Catel.MVVM.ViewModelBase.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)">
            <summary>
            Called when a property has changed for a view model type that the current view model is interested in. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command for a view model type that the current view model is interested in has been executed. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter used during the execution.</param>
            <remarks>
            This method is internal so the <see cref="T:Catel.MVVM.ManagedViewModel"/> can invoke it. This method is only used as a pass-through
            to the actual <see cref="M:Catel.MVVM.ViewModelBase.OnViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command for a view model type that the current view model is interested in has been executed. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter used during the execution.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ViewModelEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)">
            <summary>
            Views the model event.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewModelEvent">The view model event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnViewModelEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)">
            <summary>
            Called when an event for a view model type that the current view model is interested in has been raised. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewModelEvent">The view model event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on one of the registered models has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will also raise for properties that are not mapped on the view model.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnModelPropertyChangedInternal(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of a Model.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidating">
            <summary>
            Called when the object is validating.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidatingFields">
            <summary>
            Called when the object is validating the fields.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidatingBusinessRules">
            <summary>
            Called when the object is validating the business rules.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnValidated">
            <summary>
            Called when the object is validated.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeModel(System.String,System.Object)">
            <summary>
            Initializes a model by subscribing to all events.
            </summary>
            <param name="modelProperty">The name of the model property.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UninitializeModel(System.String,System.Object,Catel.MVVM.ViewModelBase.ModelCleanUpMode)">
            <summary>
            Uninitializes a model by unsubscribing from all events.
            </summary>
            <param name="modelProperty">The name of the model property.</param>
            <param name="model">The model.</param>
            <param name="modelCleanUpMode">The model clean up mode.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.OnModelErrorInfoUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ModelErrorInfo.Updated"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Cancel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Save">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Close">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBase.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBase.Save"/> method.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.IsModelRegistered(System.String)">
            <summary>
            Determines whether a specific property is registered as a model.
            </summary>
            <param name="name">The name of the registered model.</param>
            <returns>
            	<c>true</c> if a specific property is registered as a model; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.RegisterCommands(System.Boolean)">
            <summary>
            Registers all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
            <param name="force">if set to <c>true</c>, all existing commands will be removed and re-registered.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.UnregisterCommands">
            <summary>
            Unregisters all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InvalidateCommands">
            <summary>
            Invalidates all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.GetService(System.Type)">
            <summary>
            Gets the service of the specified type. Keep in mind that injected services always take precedence
            over services registered in the <see cref="P:Catel.MVVM.ViewModelBase.ServiceLocator"/>.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>Service object or <c>null</c> if the service is not found.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.GetService``1">
            <summary>
            Gets the service of the specified type.
            </summary>
            <typeparam name="T">Type of the service.</typeparam>
            <returns>Service object or <c>null</c> if the service is not found.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.RegisterViewModelServices(Catel.IoC.IServiceLocator)">
            <summary>
            Registers the known view model services.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.InitializeViewModel">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <remarks>
            It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.Initialize">
            <summary>
            Initializes the view model. Normally the initialization is done in the constructor, but sometimes this must be delayed
            to a state where the associated UI element (user control, window, ...) is actually loaded.
            <para />
            This method is called as soon as the associated UI element is loaded.
            </summary>
            <remarks>
            It's not recommended to implement the initialization of properties in this method. The initialization of properties
            should be done in the constructor. This method should be used to start the retrieval of data from a web service or something
            similar.
            <para />
            During unit tests, it is recommended to manually call this method because there is no external container calling this method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.ValidateViewModel(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CancelViewModel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CancelAndCloseViewModel">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.SaveViewModel">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.SaveAndCloseViewModel">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.CloseViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBase.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBase.Save"/> method.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
            <remarks>
            Note that the navigation contexts is first available in the <see cref="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted"/> method, 
            not in the constructor.
            </remarks>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.NavigationCompleted">
            <summary>
            Occurs when the navigation is completed.
            </summary>
            <remarks>
            This should of course be a cleaner solution, but there is no other way to let a view-model
            know that navigation has completed. Another option is injection, but this would require every
            view-model for Windows Phone 7 to accept only the navigation context, which has actually nothing
            to do with the logic.
            <para/>
            It is also possible to use the <see cref="M:Catel.MVVM.ViewModelBase.OnNavigationCompleted"/> event.
            </remarks>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.CommandExecuted">
            <summary>
            Occurs when a command on the view model has been executed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Saving">
            <summary>
            Occurs when the view model is about to be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Saved">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Canceling">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Canceled">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBase.Closed">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.UniqueIdentifier">
            <summary>
            Gets the unique identifier of the view model.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ViewModelConstructionTime">
            <summary>
            Gets the view model construction time, which is used to get unique instances of view models.
            </summary>
            <value>The view model construction time.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ParentViewModel">
            <summary>
            Gets the parent view model.
            </summary>
            <value>The parent view model.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.InvalidateCommandsOnPropertyChanged">
            <summary>
            Gets a value indicating whether the commands should automatically be invalidated on a property change.
            <para/>
            If this property is <c>false</c>, properties should either be invalidated by the .NET Framework or by a manual
            call to the <see cref="M:Catel.MVVM.ViewModelBase.InvalidateCommands"/> method.
            </summary>
            <value>
            	<c>true</c> if the commands should automatically be invalidated on a property change; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.DeferValidationUntilFirstSaveCall">
            <summary>
            Gets or sets a value indicating whether all validation should be deferred until the first call to <see cref="M:Catel.MVVM.ViewModelBase.SaveViewModel"/>.
            <para/>
            If this value is <c>true</c>, all validation will be suspended. As soon as the first call is made to the <see cref="M:Catel.MVVM.ViewModelBase.SaveViewModel"/>,
            the validation will no longer be suspended and activated.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the validation should be deferred; otherwise, <c>false</c>.
            </value>
            <remarks>
            If this value is used, it must be set as first property in the view model because the validation kicks in immediately
            when properties change.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ValidateModelsOnInitialization">
            <summary>
            Gets or sets a value indicating whether to validate the models as soon as they are initialized. This means that
            as soon as a model value is set, the view model checks whether the entity already contains errors.
            <para />
            If this value is <c>true</c>, the errors will immediately be returned for mappings on the model. Otherwise, the errors
            will only become available when a value is entered and then being undone.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the models should be validated on initialization; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.SupportIEditableObject">
            <summary>
            Gets or sets a value indicating whether models that implement <see cref="T:System.ComponentModel.IEditableObject"/> are supported correctly.
            </summary>
            <value>
            	<c>true</c> if models that implement <see cref="T:System.ComponentModel.IEditableObject"/> are supported correctly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed. If a view model is closed, calling
            <see cref="M:Catel.MVVM.ViewModelBase.CancelViewModel"/>, <see cref="M:Catel.MVVM.ViewModelBase.SaveViewModel"/> or <see cref="M:Catel.MVVM.ViewModelBase.CloseViewModel(System.Nullable{System.Boolean})"/>
            will have no effect.
            </summary>
            <value><c>true</c> if the view model is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.Title">
            <summary>
            Gets the title of the view model.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.HasErrors">
            <summary>
            Gets a value indicating whether this object contains any field or business errors.
            </summary>
            <value>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.HasDirtyModel">
            <summary>
            Gets a value indicating whether this instance has a dirty model.
            </summary>
            <value>
            	<c>true</c> if this instance has a dirty model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBase.ServiceLocator">
            <summary>
            Gets the service locator that provides all the implementations for interfaces required by the view-model.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelBase.ModelCleanUpMode">
            <summary>
            Available clean up models for a model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.ModelCleanUpMode.CancelEdit">
            <summary>
            Call <see cref="M:System.ComponentModel.IEditableObject.CancelEdit"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBase.ModelCleanUpMode.EndEdit">
            <summary>
            Call <see cref="M:System.ComponentModel.IEditableObject.EndEdit"/>.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelMetadata">
            <summary>
            Class containing meta data for a view model type.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelMetadata.#ctor(System.Type,System.Collections.Generic.Dictionary{System.String,Catel.MVVM.ModelInfo},System.Collections.Generic.Dictionary{System.String,Catel.MVVM.ViewModelToModelMapping},System.Collections.Generic.Dictionary{System.String,Catel.MVVM.ValidationToViewModelAttribute},System.ComponentModel.PropertyDescriptorCollection)">
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyDescriptors"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.Models">
            <summary>
            Gets the models.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.Mappings">
            <summary>
            Gets the mappings.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.Validations">
            <summary>
            Gets the validations.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelMetadata.PropertyDescriptors">
            <summary>
            Gets the property descriptors.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelPropertyDescriptor">
            <summary>
            Class deriving from the <see cref="T:System.ComponentModel.PropertyDescriptor"/> to show how the properties dynamically
            created by the <see cref="T:Catel.MVVM.ExposeAttribute"/> should be treated.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelPropertyDescriptor.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptor.#ctor(Catel.MVVM.ViewModelBase,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelPropertyDescriptor"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
        </member>
        <member name="P:Catel.MVVM.ViewModelPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Catel.MVVM.ViewModelPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value></value>
            <returns>true if the property is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Catel.MVVM.ViewModelPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="T:Catel.MVVM.ViewModelPropertyDescriptorFactory">
            <summary>
            Factory for <see cref="T:Catel.MVVM.ViewModelPropertyDescriptor"/> instances. This way, a property descriptor can be re-used without
            having to use reflection.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptorFactory.CreatePropertyDescriptor(Catel.MVVM.ViewModelBase,System.String,System.Type)">
            <summary>
            Creates a property descriptor for a specific view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <returns>The <see cref="T:Catel.MVVM.ViewModelPropertyDescriptor"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelPropertyDescriptorFactory.CreatePropertyDescriptor(Catel.MVVM.ViewModelBase,Catel.MVVM.ViewModelPropertyDescriptor)">
            <summary>
            Creates the property descriptor for a specfic view model based on an existing property descriptor. 
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyDescriptor">The property descriptor.</param>
            <returns>The <see cref="T:Catel.MVVM.ViewModelPropertyDescriptor"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyDescriptor"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelMapping">
            <summary>
            Model value class to store the mapping of the View Model to a Model mapping.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelMapping.#ctor(System.String,Catel.MVVM.ViewModelToModelAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelMapping"/> class.
            </summary>
            <param name="viewModelProperty">The view model property.</param>
            <param name="attribute">The <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> that was used to define the mapping.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelProperty"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelMapping.#ctor(System.String,System.String,System.String,Catel.MVVM.ViewModelToModelMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelMapping"/> class.
            </summary>
            <param name="viewModelProperty">The view model property.</param>
            <param name="modelProperty">The model property.</param>
            <param name="valueProperty">The value property.</param>
            <param name="mode">The mode.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelProperty"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.ViewModelProperty">
            <summary>
            Gets the property name of the mapping of the view model.
            </summary>
            <value>The model view property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.ModelProperty">
            <summary>
            Gets the property name of the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.ValueProperty">
            <summary>
            Gets the property property name of the property in the model.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelMapping.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:Catel.MVVM.Properties.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ArgumentMustBeOfTypeWindow">
            <summary>
              Looks up a localized string similar to Argument must be of type Window.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ArgumentMustImplementIViewModelInterface">
            <summary>
              Looks up a localized string similar to The argument must implement IViewModel interface.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ControlTemplateMustContainPart">
            <summary>
              Looks up a localized string similar to Control template must contain part &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.DataWindowButtonCanOnlyBeAddedWhenWindowIsNotLoaded">
            <summary>
              Looks up a localized string similar to DataWindowButtons can only be added when the window is not yet loaded.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.FailedToConfigureIoCContainer">
            <summary>
              Looks up a localized string similar to Failed to configure IoC container.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ModelNotRegistered">
             <summary>
               Looks up a localized string similar to There is no model &apos;{0}&apos; registered with the model attribute, so the ViewModelToModel attribute on property &apos;{1}&apos; is invalid.
            
            If you are sure that you have a model with this name, make sure it&apos;s public instead of private or protected for Silverlight and WP7 because non-public reflection is not allowed in Silverlight..
             </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.NoExpectedResultsInQueueForUnitTest">
            <summary>
              Looks up a localized string similar to No expected results in the queue, set up expected result first.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.PageNotRegistered">
            <summary>
              Looks up a localized string similar to There is no page registered as &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.PropertyNotFoundInModel">
             <summary>
               Looks up a localized string similar to Mapped viewmodel property &apos;{0}&apos; to model property &apos;{1}&apos; is invalid because property &apos;{1}&apos; is not found on the model &apos;{2}&apos;&lt;/value&gt;
                &lt;comment&gt;{0} = view model property name
            {1} = model property name
            {2} = model name.
             </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ViewModelAlreadyRegistered">
            <summary>
              Looks up a localized string similar to View model already registered.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ViewModelContainerMustBeOfTypeDependencyObject">
            <summary>
              Looks up a localized string similar to The viewModelContainer must be of type DependencyObject.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.ViewModelNotRegistered">
            <summary>
              Looks up a localized string similar to The view model of type &apos;{0}&apos; is not registered thus cannot be used in this context.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.VisibilityIsNotAllowedForConverter">
            <summary>
              Looks up a localized string similar to Visibility.Visible is not possible as not-visible option.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.WindowNotRegistered">
            <summary>
              Looks up a localized string similar to There is no window registered as &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Exceptions.WrongViewModelType">
            <summary>
              Looks up a localized string similar to The view model is of the wrong type. Expected &apos;{0}&apos;, but type is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Auditing.AuditingManager">
            <summary>
            Handles the auditing for MVVM inside Catel.
            <para/>
            Use this manager to register custom auditors.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Auditing.AuditingManager._instance">
            <summary>
            Instance of this singleton class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Auditing.AuditingManager._auditors">
            <summary>
            List of currently registered auditors.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.Clear">
            <summary>
            Clears all the current auditors.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.RegisterAuditor(Catel.MVVM.Auditing.IAuditor)">
            <summary>
            Registers a specific auditor.
            </summary>
            <param name="auditor">The auditor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="auditor"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.UnregisterAuditor(Catel.MVVM.Auditing.IAuditor)">
            <summary>
            Unregisters a specific auditor.
            <para/>
            If the auditor is not registered, nothing happens.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="auditor"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCreating(System.Type)">
            <summary>
            Must be called when a specific view model type is being created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCreated(System.Type)">
            <summary>
            Must be called when a specific view model type is created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnPropertyChanging(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Must be called when the property of a view model is about to change.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnPropertyChanged(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Must be called when the property of a view model has just changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnCommandExecuted(Catel.MVVM.IViewModel,System.String,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Must be called when a command of a view model has just been executed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="commandName">Name of the command, which is the name of the command property.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelSaving(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model is about to be saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelSaved(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model has just been saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCanceling(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model is about to be canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelCanceled(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model has just been canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelClosing(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model is about to be closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditingManager.OnViewModelClosed(Catel.MVVM.IViewModel)">
            <summary>
            Must be called when a view model has just been closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Catel.MVVM.Auditing.AuditingManager.RegisteredAuditorsCount">
            <summary>
            Gets the number of registered auditors.
            </summary>
            <value>The number of registered auditors.</value>
        </member>
        <member name="T:Catel.MVVM.Auditing.AuditorBase">
            <summary>
            Convenience implementation of the <see cref="T:Catel.MVVM.Auditing.IAuditor"/> interface so not all interface members
            have to be implemented by the developer.
            <para/>
            This auditor also ignores the default properties such as <c>IsDirty</c> since hardly anyone
            would be interested in such changes. To enable the notification, clear the <see cref="P:Catel.MVVM.Auditing.AuditorBase.PropertiesToIgnore"/>.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Auditing.IAuditor">
            <summary>
            Interface for auditors that can register itself with the <see cref="T:Catel.MVVM.Auditing.AuditingManager"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCreating(System.Type)">
            <summary>
            Called when a specific view model type is being created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCreated(System.Type)">
            <summary>
            Called when a specific view model type is created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnPropertyChanging(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model is about to change.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnPropertyChanged(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model has just changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnCommandExecuted(Catel.MVVM.IViewModel,System.String,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command of a view model has just been executed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="commandName">Name of the command, which is the name of the command property.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelSaving(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelSaved(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCanceling(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelCanceled(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelClosing(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.IAuditor.OnViewModelClosed(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Catel.MVVM.Auditing.IAuditor.PropertiesToIgnore">
            <summary>
            Gets a list of properties that should be ignored.
            </summary>
            <value>The list of properties to ignore.</value>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Auditing.AuditorBase"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCreating(System.Type)">
            <summary>
            Called when a specific view model type is being created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCreated(System.Type)">
            <summary>
            Called when a specific view model type is created.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnPropertyChanging(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model is about to change.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnPropertyChanged(Catel.MVVM.IViewModel,System.String,System.Object)">
            <summary>
            Called when the property of a view model has just changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnCommandExecuted(Catel.MVVM.IViewModel,System.String,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command of a view model has just been executed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="commandName">Name of the command, which is the name of the command property.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelSaving(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelSaved(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been saved.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCanceling(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelCanceled(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been canceled.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelClosing(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model is about to be closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.Auditing.AuditorBase.OnViewModelClosed(Catel.MVVM.IViewModel)">
            <summary>
            Called when a view model has just been closed.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="P:Catel.MVVM.Auditing.AuditorBase.PropertiesToIgnore">
            <summary>
            Gets a list of properties that should be ignored.
            </summary>
            <value>The list of properties to ignore.</value>
        </member>
        <member name="T:Catel.MVVM.Command`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with only the <typeparamref name="TExecuteParameter"/> as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.Command">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with <see cref="T:System.Object"/> as generic types.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action,System.Func{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.CommandExecutedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for the event when an <see cref="T:Catel.MVVM.ICatelCommand"/> has been executed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandExecutedEventArgs.#ctor(Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> class.
            </summary>
            <param name="command">The command that just has been executed.</param>
            <param name="commandParameter">The command parameter that was used for the execution.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.CommandExecutedEventArgs.Command">
            <summary>
            Gets the command that just has been executed.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.MVVM.CommandExecutedEventArgs.CommandParameter">
            <summary>
            Gets the command parameter used for the execution.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="T:Catel.MVVM.CommandHelper">
            <summary>
            Helper class for the <see cref="T:Catel.MVVM.Command"/> class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.CommandHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateCommand(System.Action,System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}})">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.Command"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.CommandHelper.CreateCommand``1(System.Action{``0},System.Linq.Expressions.Expression{System.Func{Catel.Data.IValidationSummary}})">
            <summary>
            Creates a new <see cref="T:Catel.MVVM.Command`1"/> that automatically determines whether it can be executed. It does this
            by checking the right validation summary, which should be in a property..
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <param name="execute">The action to execute when the command is being invoked.</param>
            <param name="validationSummaryPropertyExpression">The validation summary property expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="execute"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationSummaryPropertyExpression"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.IAuthenticationProvider">
            <summary>
            Interface to allow an authentication mechanism to control the CanExecute state of a command.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IAuthenticationProvider.CanCommandBeExecuted(Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Determines whether the specified <paramref name="command"/> can be executed. The class implementing this interface
            can use any required method to check the command.
            <para/>
            It is recommended to use the <see cref="P:Catel.MVVM.ICatelCommand.Tag"/> property to identify a command.
            </summary>
            <param name="command">The command that is requested.</param>
            <param name="commandParameter">The command parameter.</param>
            <returns>
            	<c>true</c> if the specified command can be excecuted; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The <c>CanExecute</c> state of a command is queried a lot. The command itself does not cache any results because
            it is not aware of role or identity changes. If caching is required, this must be implemented in the class implementing
            the <see cref="T:Catel.MVVM.IAuthenticationProvider"/> interface.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IAuthenticationProvider.HasAccessToUIElement(System.Windows.FrameworkElement,System.Object,System.Object)">
            <summary>
            Determines whether the user has access to the specified <paramref name="element"/>. This method is invoked
            by the <c>Authentication</c> behavior, and can be used to disable or hide UI elements based on a role or any
            other authentication mechanism.
            <para/>
            This method will only be called for UI elements with the <c>Authentication</c> behavior.
            </summary>
            <param name="element">The element.</param>
            <param name="tag">The tag, retrieved from <see cref="P:System.Windows.FrameworkElement.Tag"/>.</param>
            <param name="authenticationTag">The authentication tag specified by the calling object.</param>
            <returns>
            	<c>true</c> if the user has access to the specified UI element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.MVVM.InvalidViewModelException">
            <summary>
            Exception in case there is an invalid view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.InvalidViewModelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.InvalidViewModelException"/> class.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ModelNotRegisteredException">
            <summary>
            Exception for when a model is not registered on a class, but a <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> is used with the model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelNotRegisteredException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelNotRegisteredException"/> class.
            </summary>
            <param name="modelName">Name of the model.</param>
            <param name="propertyDeclaringViewModelToModelAttribute">The property declaring the view model to model attribute.</param>
        </member>
        <member name="P:Catel.MVVM.ModelNotRegisteredException.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:Catel.MVVM.ModelNotRegisteredException.PropertyDeclaringViewModelToModelAttribute">
            <summary>
            Gets the property declaring the view model to model attribute.
            </summary>
            <value>The property declaring the view model to model attribute.</value>
        </member>
        <member name="T:Catel.MVVM.PropertyNotFoundInModelException">
            <summary>
            Exception in case a mapped property is not found on the model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.PropertyNotFoundInModelException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.PropertyNotFoundInModelException"/> class.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="modelName">Name of the model.</param>
            <param name="modelPropertyName">Name of the model property.</param>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ViewModelPropertyName">
            <summary>
            Gets the name of the view model property.
            </summary>
            <value>The name of the view model property.</value>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ModelPropertyName">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelNotRegisteredException">
            <summary>
            Exception in case a view model is not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelNotRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelNotRegisteredException"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelNotRegisteredException.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.WrongViewModelTypeException">
            <summary>
            Exception in case that a wrong type is used for a view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.WrongViewModelTypeException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.WrongViewModelTypeException"/> class.
            </summary>
            <param name="actualType">The actual type.</param>
            <param name="expectedType">The expected type.</param>
        </member>
        <member name="P:Catel.MVVM.WrongViewModelTypeException.ActualType">
            <summary>
            Gets the actual type.
            </summary>
            <value>The actual type.</value>
        </member>
        <member name="P:Catel.MVVM.WrongViewModelTypeException.ExpectedType">
            <summary>
            Gets the expected type.
            </summary>
            <value>The expected type.</value>
        </member>
        <member name="T:Catel.MVVM.ViewHelper">
            <summary>
            View helper class for MVVM scenarios.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewHelper.ConstructViewWithViewModel``1(System.Type,System.Object)">
            <summary>
            Constructs the view with the view model. First, this method tries to inject the specified DataContext into the
            view. If the view does not contain a constructor with this parameter type, it will try to use the default constructor
            and set the DataContext manually.
            </summary>
            <typeparam name="T">The type of the view to return.</typeparam>
            <param name="viewType">Type of the view to instantiate.</param>
            <param name="dataContext">The data context to inject into the view. In most cases, this will be a view model.</param>
            <returns>The constructed view or <c>null</c> if it was not possible to construct the view.</returns>
            <remarks>Internally uses the <see cref="M:Catel.MVVM.ViewHelper.ConstructViewWithViewModel(System.Type,System.Object)"/> method and casts the result.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewHelper.ConstructViewWithViewModel(System.Type,System.Object)">
            <summary>
            Constructs the view with the view model. First, this method tries to inject the specified DataContext into the
            view. If the view does not contain a constructor with this parameter type, it will try to use the default constructor
            and set the DataContext manually.
            </summary>
            <param name="viewType">Type of the view to instantiate.</param>
            <param name="dataContext">The data context to inject into the view. In most cases, this will be a view model.</param>
            <returns>The constructed view or <c>null</c> if it was not possible to construct the view.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.AccelerometerValueChangedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation which contains a new accelerometer value.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.AccelerometerValueChangedEventArgs.#ctor(Catel.MVVM.Services.IAccelerometerValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.AccelerometerValueChangedEventArgs"/> class.
            </summary>
            <param name="newValue">The new accelerometer value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newValue"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.AccelerometerValueChangedEventArgs.Value">
            <summary>
            Gets the new accelerometer value.
            </summary>
            <value>The new accelerometer value.</value>
        </member>
        <member name="T:Catel.MVVM.Services.CameraOperationCompletedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> for camera operations.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.CameraOperationCompletedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.CameraOperationCompletedEventArgs"/> class.
            </summary>
            <param name="ex">The exception that occurred. If no exception has occurred, pass <c>null</c>.</param>
        </member>
        <member name="P:Catel.MVVM.Services.CameraOperationCompletedEventArgs.Exception">
            <summary>
            Gets the exception that occurred if any exception occurred. If no exception occurred,
            this value is <c>null</c>.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Catel.MVVM.Services.CameraOperationCompletedEventArgs.Succeeded">
            <summary>
            Gets or sets a value indicating whether the operation is succeeded.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.Services.ContentReadyEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for camera content ready operations.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ContentReadyEventArgs.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.ContentReadyEventArgs"/> class.
            </summary>
            <param name="imageStream">The image stream.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="imageStream"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.ContentReadyEventArgs.ImageStream">
            <summary>
            Gets the image stream of the image.
            </summary>
            <value>The image stream.</value>
        </member>
        <member name="T:Catel.MVVM.Services.LocationChangedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation which contains a location.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.LocationChangedEventArgs.#ctor(Catel.MVVM.Services.ILocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.LocationChangedEventArgs"/> class.
            </summary>
            <param name="newLocation">The new location.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newLocation"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.LocationChangedEventArgs.Location">
            <summary>
            Gets the new location.
            </summary>
            <value>The new location.</value>
        </member>
        <member name="T:Catel.MVVM.Services.UICompletedEventArgs">
            <summary>
            This is the EventArgs return value for the IUIVisualizer.Show completed event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.UICompletedEventArgs.#ctor(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.UICompletedEventArgs"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:Catel.MVVM.Services.UICompletedEventArgs.DataContext">
            <summary>
            Gets the data context.
            </summary>
            <value>The data context.</value>
        </member>
        <member name="P:Catel.MVVM.Services.UICompletedEventArgs.Result">
            <summary>
            Gets the result of the window.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Catel.MVVM.Services.PageNotRegisteredException">
            <summary>
            Exception in case a page not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PageNotRegisteredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.PageNotRegisteredException"/> class.
            </summary>
            <param name="name">The name of the page.</param>
        </member>
        <member name="P:Catel.MVVM.Services.PageNotRegisteredException.Name">
            <summary>
            Gets the name of the page.
            </summary>
            <value>The name of the page.</value>
        </member>
        <member name="T:Catel.MVVM.Services.WindowNotRegisteredException">
            <summary>
            Exception in case a window not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.WindowNotRegisteredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.WindowNotRegisteredException"/> class.
            </summary>
            <param name="name">The name of the window.</param>
        </member>
        <member name="P:Catel.MVVM.Services.WindowNotRegisteredException.Name">
            <summary>
            Gets the name of the window.
            </summary>
            <value>The name of the window.</value>
        </member>
        <member name="T:Catel.MVVM.Services.IAccelerometerService">
            <summary>
            Interface for accelerometer sensors.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.ISensorService`2">
            <summary>
            Interface that serves as a base interface for interfaces supported sensors (especially on Windows Phone 7).
            </summary>
            <typeparam name="TValueInterface">The type of the value interface.</typeparam>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Services.ISensorService`2.GetCurrentValue">
            <summary>
            Gets the current sensor value.
            </summary>
            <returns>
            The current sensor value. If no value is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.ISensorService`2.Start">
            <summary>
            Starts the sensor service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ISensorService`2.Stop">
            <summary>
            Stops the sensor service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ISensorService`2.CurrentValueChanged">
            <summary>
            Occurs when the current sensor value has changed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ISensorService`2.IsSupported">
            <summary>
            Gets a value indicating whether the device supports the current sensor and thus supports getting values.
            </summary>
            <value>
            	<c>true</c> if this device supports the current sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.ISensorService`2.TimeBetweenUpdates">
            <summary>
            Gets or sets the preferred time between updates.
            </summary>
            <value>The preferred time between updates.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ISensorService`2.CurrentValue">
            <summary>
            Gets the current sensor value. If no value is available, <c>null</c> will be returned.
            </summary>
            <value>The current sensor value.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.MVVM.Services.ISensorService`2.GetCurrentValue"/>.
            <para/>
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot 
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.MVVM.Services.ISensorService`2.CurrentValueChanged"/> event.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Services.IAccelerometerValue">
            <summary>
            Value information about the accelerometer.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.IAccelerometerValue.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="P:Catel.MVVM.Services.IAccelerometerValue.X">
            <summary>
            Gets the X coordinate.
            </summary>
            <value>The X coordinate.</value>
        </member>
        <member name="P:Catel.MVVM.Services.IAccelerometerValue.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
            <value>The Y coordinate.</value>
        </member>
        <member name="P:Catel.MVVM.Services.IAccelerometerValue.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
            <value>The Z coordinate.</value>
        </member>
        <member name="T:Catel.MVVM.Services.FlashMode">
            <summary>
            Defines the operating mode of the camera flash.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.FlashMode.On">
            <summary>
            The camera flash is enabled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.FlashMode.Off">
            <summary>
            The camera flash is disabled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.FlashMode.Auto">
            <summary>
            The camera flash is in auto mode.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.FlashMode.RedEyeReduction">
            <summary>
            The camera flash is in red-eye reduction mode.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.CameraType">
            <summary>
            Specifies the general location of the camera on the device.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.CameraType.Primary">
            <summary>
            The camera is located on the back of the device.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.CameraType.FrontFacing">
            <summary>
            The camera is located on the front of the device.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.ICameraService">
            <summary>
            Interface for retrieving the camera information.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.Start">
            <summary>
            Starts the camera service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.Start(Catel.MVVM.Services.CameraType)">
            <summary>
            Starts the camera service for a specific camera type so it's retrieving data.
            </summary>
            <param name="cameraType">Type of the camera.</param>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.Stop">
            <summary>
            Stops the camera service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.Focus">
            <summary>
            Starts a camera auto focus operation.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.FocusAtPoint(System.Double,System.Double)">
            <summary>
            Starts a camera auto focus operation on a specific point in the viewfinder, for those devices that support it.
            </summary>
            <param name="x">The horizontal location in the viewfinder; a value between 0 (left) and 1.0 (right).</param>
            <param name="y">The vertical location in the viewfinder; a value between 0 (top) and 1.0 (bottom).</param>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.CancelFocus">
            <summary>
            Cancels the current camera auto focus operation.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.CaptureImage">
            <summary>
            Initiates a full-resolution capture of the current image displayed in the viewfinder
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.IsCameraTypeSupported(Catel.MVVM.Services.CameraType)">
            <summary>
            Determines whether a particular camera type is supported on the device.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified camera type is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.IsFlashModeSupported(Catel.MVVM.Services.FlashMode)">
            <summary>
            Determines whether a particular flash mode is supported on the device.
            </summary>
            <param name="mode">The mode.</param>
            <returns>
            	<c>true</c> if the specified flash mode is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.GetPreviewBufferArgb32(System.Int32[])">
            <summary>
            Copies the current viewfinder ARGB frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The ARGB pixel data.</param>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.GetPreviewBufferY(System.Byte[])">
            <summary>
            Copies the luminance data for the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The YCrCb pixel data.</param>
        </member>
        <member name="M:Catel.MVVM.Services.ICameraService.GetPreviewBufferYCbCr(System.Byte[])">
            <summary>
            Copies the current viewfinder frame into a buffer for further manipulation.
            </summary>
            <param name="pixelData">The pixel data.</param>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.AvailableResolutions">
            <summary>
            Gets the available resolutions.
            </summary>
            <value>The available resolutions.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.FlashMode">
            <summary>
            Gets or sets the flash mode. Unsupported flash modes silently default to <see cref="F:Catel.MVVM.Services.FlashMode.Off"/>.
            </summary>
            <value>The flash mode.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.CameraType">
            <summary>
            Gets the type of the camera.
            </summary>
            <value>The type of the camera.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.IsFocusAtPointSupported">
            <summary>
            Gets a value indicating whether the camera can programmatically auto focus on a specific point in the viewfinder.
            </summary>
            <value>
            	<c>true</c> if the camera can programmatically auto focus on a specific point in the viewfinder; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.IsFocusSupported">
            <summary>
            Gets a value indicating whether the camera can be auto-focused programmatically.
            </summary>
            <value>
            	<c>true</c> if the camera can be auto-focused programmatically; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.Orientation">
            <summary>
            Gets the number of degrees that the viewfind brush needs to be rotated clockwise to align with the camera sensor.
            </summary>
            <value>The number of degrees that the viewfinder brush needs to be rotated clockwise to align with the camera sensor.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.PreviewResolution">
            <summary>
            Gets the preview resolution of the images.
            </summary>
            <value>The preview resolution.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ICameraService.Resolution">
            <summary>
            Gets or sets the resolution of the actual images.
            </summary>
            <value>The resolution.</value>
        </member>
        <member name="E:Catel.MVVM.Services.ICameraService.Initialized">
            <summary>
            Occurs when the camera has been initialized.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ICameraService.AutoFocusCompleted">
            <summary>
            Occurs when the focus operation is completed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ICameraService.CaptureStarted">
            <summary>
            Occurs when the capture sequence has started.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ICameraService.CaptureThumbnailAvailable">
            <summary>
            Occurs when a thumbnail image is available.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ICameraService.CaptureImageAvailable">
            <summary>
            Occurs when an image is available.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ICameraService.CaptureCompleted">
            <summary>
            Occurs when the capture sequence is complete.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IFileSupport">
            <summary>
            Interface that supports file handling.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IFileSupport.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.IFileSupport.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.IFileSupport.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.IFileSupport.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.IFileSupport.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.ILocation">
            <summary>
            Interface that represents a location.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ILocation.Latitude">
            <summary>
            Gets the latitude. The latitute is the angular distance of that location south or north of the equator.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ILocation.Longitude">
            <summary>
            Gets the longitude. The longitude specifies the east-west position of a point on the Earth's surface.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ILocation.Altitude">
            <summary>
            Gets the altitude. The altitude is the height of the location.
            </summary>
            <value>The altitude.</value>
        </member>
        <member name="T:Catel.MVVM.Services.ILocationService">
            <summary>
            Interface that supports retrieving the current location.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ILocationService.GetCurrentLocation">
            <summary>
            Gets the current location.
            </summary>
            <returns>
            The current location represented as <see cref="T:Catel.MVVM.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.ILocationService.Start">
            <summary>
            Starts the location service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ILocationService.Stop">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ILocationService.LocationChanged">
            <summary>
            Occurs when the current location has changed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ILocationService.CurrentLocation">
            <summary>
            Gets the current location represented as <see cref="T:Catel.MVVM.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </summary>
            <value>The current location.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.MVVM.Services.ILocationService.GetCurrentLocation"/>.
            <para/>
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot 
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.MVVM.Services.ILocationService.LocationChanged"/> event.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Services.MessageResult">
            <summary>
            Available message results.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxResult</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.None">
            <summary>
            No result available.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.OK">
            <summary>
            Message is acknowledged.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.Cancel">
            <summary>
            Message is canceled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.Yes">
            <summary>
            Message is acknowledged with yes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.No">
            <summary>
            Message is acknowledged with no.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.MessageButton">
            <summary>
            Available message buttons.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxButton</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.OKCancel">
            <summary>
            OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.YesNo">
            <summary>
            Yes and No buttons.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.MessageImage">
            <summary>
            Available message images.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxImage</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.None">
            <summary>
            Show no image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Information">
            <summary>
            Information image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Question">
            <summary>
            Question image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Exclamation">
            <summary>
            Exclamation image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Error">
            <summary>
            Error image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Stop">
            <summary>
            Stop image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Warning">
            <summary>
            Warning image.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IMessageService">
            <summary>
            Interface for the message service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowError(System.Exception,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowError(System.String,System.String,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowWarning(System.String,System.String,System.Action)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowInformation(System.String,System.String,System.Action)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowAsync(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.INavigationService">
            <summary>
            Service to navigate inside applications.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.GoBack">
            <summary>
            Navigates back to the previous page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.GoForward">
            <summary>
            Navigates forward to the next page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="uri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.Uri)">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Register(System.Type,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Register(System.String,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="name">The name of the registered page.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="name"/> is already registered.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered page.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Catel.MVVM.Services.INavigationService.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.INavigationService.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate forward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.Services.IOpenFileService">
            <summary>
            Interface for the Open File service.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.PleaseWaitWorkDelegate">
            <summary>
            Please wait work delegate.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IPleaseWaitService">
            <summary>
            Interface for the Please Wait service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
            <param name="status">The status to change the text to.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class 
            is responsible for holding a counter internally which a call to this method will decrease.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.ProcessCompletedDelegate">
            <summary>
            Delegate to invoke when a process of the <see cref="T:Catel.MVVM.Services.IProcessService"/> is completed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IProcessService">
            <summary>
            Interface for the Process service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.ISaveFileService">
            <summary>
            Interface for the Save File service.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IUIVisualizerService">
            <summary>
            This interface defines a UI controller which can be used to display dialogs
            in either modal or modaless form from a ViewModel.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.IVibrateService">
            <summary>
            Interface defining the functionality of the vibrate service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IVibrateService.Start(System.TimeSpan)">
            <summary>
            Starts vibration on the device.
            </summary>
            <param name="duration">
            A TimeSpan object specifying the amount of time, in seconds, for which the phone vibrates.
            Valid times are between 0 and 5 seconds. Values greater than 5 or less than 0 will generate an exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Duration is greater than the 5 seconds or duration is negative.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IVibrateService.Stop">
            <summary>
            Stops the vibration on the device.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IViewModelService">
            <summary>
            Interface to declare services in a view model.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.IViewModelService.Name">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="T:Catel.MVVM.Services.MessageService">
            <summary>
            Message service that implements the <see cref="T:Catel.MVVM.Services.IMessageService"/> by using the <see cref="T:System.Windows.MessageBox"/> class.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.ViewModelServiceBase">
            <summary>
            Base class for all view model services.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ViewModelServiceBase.Name">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ViewModelServiceBase.Dispatcher">
            <summary>
            Gets the current dispatcher.
            </summary>
            <value>The current dispatcher.</value>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageBoxResult(System.Windows.MessageBoxResult)">
            <summary>
            Translates the message box result.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Corresponding <see cref="T:Catel.MVVM.Services.MessageResult"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageImage(Catel.MVVM.Services.MessageImage)">
            <summary>
            Translates the message image.
            </summary>
            <param name="image">The image.</param>
            <returns>
            Corresponding <see cref="T:System.Windows.MessageBoxImage"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageButton(Catel.MVVM.Services.MessageButton)">
            <summary>
            Translates the message button.
            </summary>
            <param name="button">The button.</param>
            <returns>
            Corresponding <see cref="T:System.Windows.MessageBoxButton"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.Exception,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.String,System.String,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowWarning(System.String,System.String,System.Action)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowInformation(System.String,System.String,System.Action)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowAsync(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.NamingConvention">
            <summary>
            Class that is able to resolve naming conventions.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.NamingConvention.ViewModelName">
            <summary>
            The view model name constant that will be replaced by the naming convention. This constant will be
            replaced by the view model name without the "ViewModel" prefix.
            <para />
            For example, the following naming convention:
              <c>[AS].UI.Views.[VM]View</c>
            <para />
            will result in the following view for <c>ExampleViewModel</c>:
              <c>MyAssembly.UI.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.NamingConvention.ViewName">
            <summary>
            The view name constant that will be replaced by the naming convention. This constant will be
            replaced by the view name without the "View", "Window" and "Control" prefix.
            <para />
            For example, the following naming convention:
              <c>[AS].UI.Views.[VW]ViewModel</c>
            <para />
            will result in the following view model for <c>ExampleViewModel</c>:
              <c>MyAssembly.UI.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.NamingConvention.Assembly">
            <summary>
            The assembly constant that will be replaced by the naming convention. This constant will be
            replaced by the assembly name.
            <para />
            For example, the following naming convention:
              <c>[AS].UI.Views.[VM]View</c>
            <para />
            will result in the following view for <c>ExampleViewModel</c>:
              <c>MyAssembly.UI.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.NamingConvention.Up">
            <summary>
            The assembly constant that will be replaced by the naming convention. This constant will be
            move up one step in the type namespace tree.
            <para />
            For example, the following naming convention:
              <c>[UP].Views.[VM]View</c>
            <para />
            will result in the following view for <c>Catel.ViewModels.ExampleViewModel</c>:
              <c>Catel.Views.ExampleView.xaml</c>
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.ResolveViewByViewModelName(System.String,System.String,System.String)">
            <summary>
            Resolves the convention by using the view model name.
            <para/>
            This method does not add assemblies or resolve types, but will only return a string containing the resolved
            value based on the convention.
            <para/>
            The following constants can be used in this method:
            * <see cref="F:Catel.MVVM.Services.NamingConvention.ViewModelName"/>
            </summary>
            <param name="assembly">The assembly which is the base namespace.</param>
            <param name="fullViewModelName">Class name of the view model. This parameter must only contain the type name, not the full
            type. For example <c>ExampleViewModel</c>.</param>
            <param name="conventionToUse">The convention to use.</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="assembly"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullViewModelName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.ResolveViewModelByViewName(System.String,System.String,System.String)">
            <summary>
            Resolves the convention by using the view name.
            <para/>
            This method does not add assemblies or resolve types, but will only return a string containing the resolved
            value based on the convention.
            <para/>
            The following constants can be used in this method:
            * <see cref="F:Catel.MVVM.Services.NamingConvention.ViewName"/>
            </summary>
            <param name="assembly">The assembly which is the base namespace.</param>
            <param name="fullViewName">Class name of the view. This parameter must only contain the type name, not the full
            type. For example <c>ExampleView</c>.</param>
            <param name="conventionToUse">The convention to use.</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="assembly"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="fullViewName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.ResolveNamingConvention(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Resolves the naming convention.
            </summary>
            <param name="constantsWithValues">
            The constants with values. The <c>Key</c> must be the constant as it will be used inside the convention. The
            <c>Value</c> is the value the constant must be replaced with.
            </param>
            <param name="conventionToUse">The convention to use.</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="constantsWithValues"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.ResolveNamingConvention(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Resolves the naming convention.
            </summary>
            <param name="constantsWithValues">
            The constants with values. The <c>Key</c> must be the constant as it will be used inside the convention. The
            <c>Value</c> is the value the constant must be replaced with.
            </param>
            <param name="conventionToUse">The convention to use.</param>
            <param name="value">The value you try to resolve</param>
            <returns>The resolved convention.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="constantsWithValues"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="conventionToUse"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.GetParentPath(System.String)">
            <summary>
            Gets the parent path with the separator of choice. For example, the following path:
            <para/>
            <c>Catel.MVVM.Services</c>
            <para/>
            Will return the following value when using the dot (.) as separator:
            <para/>
            <c>Catel.MVVM</c>
            </summary>
            <param name="path">The path.</param>
            <returns>The parent path.</returns>
            <remarks>
            This method automatically finds the parent separator by calling the <see cref="M:Catel.MVVM.Services.NamingConvention.GetParentSeparator(System.String)"/> and
            then calls <see cref="M:Catel.MVVM.Services.NamingConvention.GetParentPath(System.String,System.String)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="path"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.GetParentPath(System.String,System.String)">
            <summary>
            Gets the parent path with the separator of choice. For example, the following path:
            <para/>
            <c>Catel.MVVM.Services</c>
            <para/>
            Will return the following value when using the dot (.) as separator:
            <para/>
            <c>Catel.MVVM</c>
            </summary>
            <param name="path">The path.</param>
            <param name="separator">The separator.</param>
            <returns>The parent path.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="path"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="separator"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.GetParentSeparator(System.String)">
            <summary>
            Gets the parent separator.
            <para/>
            This method tries to use the following separators:
            <list type="number">
              <item><description>Backslash (\)</description></item>
              <item><description>Slash (/)</description></item>
              <item><description>Dot (.)</description></item>
              <item><description>Pipe (|)</description></item>
            </list>
            </summary>
            <param name="path">The path.</param>
            <returns>The separator or <c>null</c> if no known separator was found.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="path"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NamingConvention.RemoveAllPostfixes(System.String,System.String[])">
            <summary>
            Removes all postfixes from the specified value.
            </summary>
            <param name="value">The value to remove the postfixes from.</param>
            <param name="postfixesToRemove">The postfixes to remove.</param>
            <returns>The value without the postfixes.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="postfixesToRemove"/> is <c>null</c> or an empty array.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.NavigationService">
            <summary>
            Service to navigate inside applications.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.NavigationService.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.NavigationService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.GoBack">
            <summary>
            Navigates back to the previous page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.GoForward">
            <summary>
            Navigates forward to the next page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="uri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Navigate(System.Uri)">
            <summary>
            Navigates to a specific location.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Register(System.Type,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Register(System.String,System.Uri)">
            <summary>
            Registers the specified view model and the uri. Use this method to override the uri
            detection mechanism in Catel.
            </summary>
            <param name="name">The name of the registered page.</param>
            <param name="uri">The URI to register.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="name"/> is already registered.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered page.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.GetApplicationRootFrame">
            <summary>
            Gets the application root frame.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.NavigationService.EnsurePageTypeIsCorrect(System.Type)">
            <summary>
            Ensures that the page type is correct for the target framework.
            </summary>
            <param name="pageType">Type of the page.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="pageType"/> is not of the right type.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.NavigationService.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.NavigationService.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate backforward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.NavigationService.RootFrame">
            <summary>
            Gets the root frame.
            </summary>
            <value>The root frame.</value>
        </member>
        <member name="T:Catel.MVVM.Services.OpenFileService">
            <summary>
            Service to open files.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.OpenFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.PleaseWaitService">
            <summary>
            Please wait service to show a please wait window during background activities. This service uses the <see cref="T:Catel.Windows.PleaseWaitWindow"/>
            for the actual displaying of the please wait status to the user.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class 
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class 
            is responsible for holding a counter internally which a call to this method will decrease.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.ProcessService">
            <summary>
            Process service to run files or start processes from a view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.SaveFileService">
            <summary>
            Service to save files.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.SaveFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.MessageService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IMessageService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.MessageService service = (Test.MessageService)GetService<IMessageService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(MessageResult.Yes);
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.MessageService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.Exception,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="exception">The exception.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.String,System.String,System.Action)">
            <summary>
            Shows an error message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowWarning(System.String,System.String,System.Action)">
            <summary>
            Shows a warning message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowInformation(System.String,System.String,System.Action)">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message and returns the result.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowAsync(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage,System.Action{Catel.MVVM.Services.MessageResult})">
            <summary>
            Shows an information message to the user and allows a callback operation when the message is completed.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="completedCallback">The callback to invoke when the message is completed. Can be <c>null</c>.</param>
            <remarks>
            There is no garantuee that the method will be executed asynchronous, only that the <paramref name="completedCallback"/>
            will be invoked when the message is dismissed.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="caption"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.MessageService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.OpenFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IOpenFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.OpenFileService service = (Test.OpenFileService)GetService<IOpenFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.OpenFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.Test.OpenFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.PleaseWaitService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IPleaseWaitService"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status. When the string is <c>null</c> or empty, the default please wait text will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.UpdateStatus(System.Int32,System.Int32,System.String)">
            <summary>
            Updates the status and shows a progress bar with the specified status text. The percentage will be automatically calculated.
            <para/>
            The busy indicator will automatically hide when the <paramref name="totalItems"/> is larger than <paramref name="currentItem"/>.
            <para/>
            When providing the <paramref name="statusFormat"/>, it is possible to use <c>{0}</c> (represents current item) and
            <c>{1}</c> (represents total items).
            </summary>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
            <param name="statusFormat">The status format. Can be empty, but not <c>null</c>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="currentItem"/> is smaller than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="statusFormat"/> is <c>null</c>.</exception>
            <remarks></remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Push(System.String)">
            <summary>
            Increases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will increase.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            decrease the counter, make a call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
            <param name="status">The status to change the text to.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Pop">
            <summary>
            Decreases the number of clients that show the please wait window. The implementing class
            is responsible for holding a counter internally which a call to this method will decrease.
            <para/>
            As long as the internal counter is not zero (0), the please wait window will stay visible. To
            increase the counter, make a call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Pop"/>.
            <para/>
            A call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(System.String)"/> or one of its overloads will not increase the internal counter. A
            call to <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> will reset the internal counter to zero (0) and thus hide the window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.Test.ProcessServiceTestResult">
            <summary>
            Class representing the process result.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.ProcessServiceTestResult"/> class, with <c>0</c> as default process result code.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.ProcessServiceTestResult"/> class.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
            <param name="processResultCode">The process result code to return in case of a callback.</param>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessServiceTestResult.Result">
            <summary>
            Gets or sets a value indicating whether the process should be returned as successfull when running the process.
            </summary>
            <value><c>true</c> if the process should be returned as successfull; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessServiceTestResult.ProcessResultCode">
            <summary>
            Gets or sets the process result code.
            </summary>
            <value>The process result code.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.ProcessService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IProcessService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.ProcessService service = (Test.ProcessService)GetService<IProcessService>();
            
            // Queue the next expected result (next StartProcess will succeed to run app, 5 will be returned as exit code)
            service.ExpectedResults.Add(new ProcessServiceTestResult(true, 5));
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessService.ExpectedResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)"/> method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.SaveFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.ISaveFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.SaveFileService service = (Test.SaveFileService)GetService<ISaveFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.SaveFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.Test.SaveFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.UIVisualizerService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IUIVisualizerService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.UIVisualizerService service = (Test.UIVisualizerService)GetService<IUIVisualizerService>();
            
            // Queue the next expected result
            service.ExpectedShowResults.Add(() =>
                         {
                           // If required, handle custom data manipulation here
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.UIVisualizerService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.ExpectedShowResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.ExpectedShowDialogResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.MVVM.Services.UIVisualizerService">
            <summary>
            Service to show modal or non-modal popup windows.
            <para/>
            All windows will have to be registered manually or are be resolved via the <see cref="T:Catel.MVVM.IViewLocator"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.UIVisualizerService.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.UIVisualizerService._registeredWindows">
            <summary>
            Dictionary of registered windows.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.ViewModelNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">The <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.CreateWindow(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs},System.Boolean)">
            <summary>
            This creates the window from a key.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data that will be set as data context.</param>
            <param name="completedProc">Callback</param>
            <param name="isModal">True if this is a ShowDialog request</param>
            <returns>The created window.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.CreateWindow(System.Type,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs},System.Boolean)">
            <summary>
            This creates the window of the specified type.
            </summary>
            <param name="windowType">The type of the window.</param>
            <param name="data">The data that will be set as data context.</param>
            <param name="completedProc">Callback</param>
            <param name="isModal">True if this is a ShowDialog request</param>
            <returns>The created window.</returns>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMappingType">
            <summary>
            Mapping types for the <see cref="T:Catel.MVVM.UI.ViewToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.TwoWayDoNothing">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, nothing happens when the view model of the view
            changes. This way, it might be possible that the values of the view and the
            view model are different. The first one to update next will update the other.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.TwoWayViewWins">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the view is used when the view model 
            of the view is changed, and is directly transferred to the view model value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.TwoWayViewModelWins">
            <summary>
            Two way, which means that either the view or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the view model is used when the view model 
            of the view is changed, and is directly transferred to the view value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.ViewToViewModel">
            <summary>
            The mapping is from the view to the view model only.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingType.ViewModelToView">
            <summary>
            The mapping is from the view model to the view only.
            </summary>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelAttribute">
            <summary>
            A mapper attribute to map a <see cref="T:System.Windows.FrameworkElement"/> (such as the <see cref="T:Catel.Windows.Controls.UserControl"/>
            or the <see cref="T:Catel.Windows.DataWindow"/> property to a <see cref="T:Catel.MVVM.ViewModelBase"/> property.
            <para/>
            This class is very useful when creating custom user controls that need more parameterized settings than just the
            <c>DataContext</c> property.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelAttribute"/> class.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelAttribute.ViewModelPropertyName">
            <summary>
            Gets or sets the view model property name.
            </summary>
            <value>The view model property name.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelAttribute.MappingType">
            <summary>
            Gets or sets the type of the mapping.
            </summary>
            <value>The type of the mapping.</value>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMapping">
            <summary>
            Holds the information for a view to viewmodel mapping. The information is based on the <see cref="T:Catel.MVVM.UI.ViewToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMapping.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMapping.#ctor(System.String,System.String,Catel.MVVM.UI.ViewToViewModelMappingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> class.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="mapping">The mapping type.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMapping.ViewPropertyName">
            <summary>
            Gets the name of the view property.
            </summary>
            <value>The name of the view property.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMapping.ViewModelPropertyName">
            <summary>
            Gets the name of the view model property.
            </summary>
            <value>The name of the view model property.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMapping.MappingType">
            <summary>
            Gets or sets the mapping type.
            </summary>
            <value>The mapping type.</value>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMappingContainer">
            <summary>
            Container class for <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> elements.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingContainer.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingContainer._viewToViewModelMappings">
            <summary>
            Dictionary containing all the view to view model mappings.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingContainer._viewModelToViewMappings">
            <summary>
            Dictionary containing all the view model to view mappings.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.#ctor(System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelMappingContainer"/> class.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyObject"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.GetAllViewToViewModelMappings">
            <summary>
            Gets all the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> that are registered.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.ContainsViewToViewModelMapping(System.String)">
            <summary>
            Determines whether the manager contains a view to view model property mapping for the specified view property name.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <returns>
            	<c>true</c> if the manager contains a view to view model property mapping for the specified view property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.GetViewToViewModelMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> that is mapped to the specified view property name.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <returns><see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.ContainsViewModelToViewMapping(System.String)">
            <summary>
            Determines whether the manager contains a view model to view property mapping for the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns>
            	<c>true</c> if the manager contains a view model to view property mapping for the specified view model property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingContainer.GetViewModelToViewMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> that is mapped to the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns><see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/>.</returns>
        </member>
        <member name="T:Catel.MVVM.UI.ViewToViewModelMappingHelper">
            <summary>
            Helper class to fix <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._viewModelContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.IViewModelContainer"/> instances managed by this helper class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._viewToViewModelMappingContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.UI.ViewToViewModelMappingContainer"/> instances per type (which should be a <see cref="T:System.Windows.DependencyObject"/>).
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._ignoredViewModelChanges">
            <summary>
            List of properties in the view model that should be ignored.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ViewToViewModelMappingHelper._ignoredViewChanges">
            <summary>
            List of properties in the view that should be ignored.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.#ctor(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ViewToViewModelMappingHelper"/> class.
            </summary>
            <param name="viewModelContainer">The view model container.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelContainer"/> is not a <see cref="T:System.Windows.DependencyObject"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.InitializeViewToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container to initialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelContainer"/> is not a <see cref="T:System.Windows.DependencyObject"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.UninitializeViewToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container the uninitialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.UninitializeViewToViewModelMappings">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.UI.ViewToViewModelMapping"/> for the registered <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.InitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Initializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.UninitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Uninitializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.OnViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the view model on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model has changed.
            </summary>
            <param name="sender">The view model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.OnViewModelContainerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.TransferValueFromViewToViewModel(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a view property to the view model property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.TransferValueFromViewModelToView(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a view model property to the view property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="viewPropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="viewModelPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UI.ViewToViewModelMappingHelper.TransferValue(System.Object,System.String,System.Object,System.String)">
            <summary>
            Transfers a value from the source property to the target property.
            </summary>
            <param name="source">The source.</param>
            <param name="sourcePropertyName">Name of the source property.</param>
            <param name="target">The target.</param>
            <param name="targetPropertyName">Name of the target property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="sourcePropertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="targetPropertyName"/> is <c>null</c> or whitespace.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.ViewModelContainer">
            <summary>
            Gets the view model container.
            </summary>
            <value>The view model container.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.ViewModelContainerType">
            <summary>
            Gets the type of the view model container.
            </summary>
            <value>The type of the view model container.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.PreviousViewModel">
            <summary>
            Gets or sets the previous view model.
            </summary>
            <value>The previous view model.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ViewToViewModelMappingHelper.CurrentViewModel">
            <summary>
            Gets the current view model.
            </summary>
            <value>The current view model.</value>
        </member>
        <member name="T:Catel.MVVM.ExposeAttribute">
            <summary>
              Attribute to define a property available on a model property that is decorated with
              the <see cref="T:Catel.MVVM.ModelAttribute"/> as well.
              <para/>
              <example>
                <code>
                  <![CDATA[
                  [Model]
                  [Expose("FirstName")]
                  [Expose("MiddleName")]
                  [Expose("LastName")]
                  public Person Person { get ;set; }
                  ]]>
                </code>
              </example>
            </summary>
        </member>
        <member name="M:Catel.MVVM.ExposeAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Catel.MVVM.ExposeAttribute"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.MVVM.ExposeAttribute.PropertyName">
            <summary>
              Gets the name of the property that should be automatically created.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Catel.MVVM.ExposeAttribute.PropertyNameOnModel">
            <summary>
              Gets or sets the name of the property on the model. If the <see cref="P:Catel.MVVM.ExposeAttribute.PropertyName"/> is not the
              same as the name of the property on the model, this can be used to map the properties.
              <para/>
              By default, the value is the same as the <see cref="P:Catel.MVVM.ExposeAttribute.PropertyName"/>.
              <example>
                In this example, the name of the property to map on the model is <c>first_name</c>, but
                it must be available as <c>FirstName</c> on the view model.
                <code>
                  <![CDATA[
                    [Model]
                    [Expose("FirstName", "first_name")]
                    public Person Person { get; set; }
                  ]]>
                </code>
              </example>
            </summary>
            <value>The property name on model.</value>
        </member>
        <member name="P:Catel.MVVM.ExposeAttribute.Mode">
            <summary>
            Gets or sets the mode of the mapping.
            <para/>
            The default value is <see cref="F:Catel.MVVM.ViewModelToModelMode.TwoWay"/>.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:Catel.MVVM.InterestedInAttribute">
            <summary>
            Attribute to decorate view models with. When a view model is decorated with this attribute, it will automatically
            receive property change notifications for the view models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.InterestedInAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.InterestedInAttribute"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.InterestedInAttribute.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.ModelAttribute">
            <summary>
            Attribute to define a property in a view model as a model. Objects decorated with this attribute
            will be automatically validated when a property changes.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelAttribute"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ModelAttribute.SupportIEditableObject">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.ValidationToViewModelAttribute">
            <summary>
            Attribute to gather validation from a <see cref="T:Catel.Data.IValidationContext"/> in a property, which must be of type
            <see cref="T:Catel.Data.IValidationSummary"/>.
            </summary>
            <example>
            The attribute must be used like this and all validations with the tag <c>PersonValidationTag</c> will 
            be gathered into the summary:
            <para/>
            <code>
            <![CDATA[
            [ValidationToViewModel("PersonValidationTag")]
            public IValidationSummary PersonValidationSummary { get; set; }
            ]]>
            </code>
            </example>
            <remarks>
            This attribute can only be used inside a view model.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ValidationToViewModelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ValidationToViewModelAttribute"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ValidationToViewModelAttribute.IncludeChildViewModels">
            <summary>
            Gets or sets a value indicating whether the validation of the child view models should also be included.
            <para />
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the validation of the child view models should also be included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ValidationToViewModelAttribute.UseTagToFilter">
            <summary>
            Gets or sets a value indicating whether this attribute should use the tag to filter the validation.
            <para/>
            If the value is <c>true</c>, the validation will be filtered on the tag. Otherwise, all validation results 
            will be returned. Keep in mind that the <see cref="P:Catel.MVVM.ValidationToViewModelAttribute.Tag"/> can still be <c>null</c>, even when this value is <c>true</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if [use tag to filter]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ValidationToViewModelAttribute.Tag">
            <summary>
            Gets or sets the tag to filter by.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelMode">
            <summary>
            Specifies the different mapping modes available for the <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.TwoWay">
            <summary>
            Automatically maps the property from view model to model and back as soon
            as either one changes the property value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.OneWay">
            <summary>
            Automatically maps the property from the model to the view model if the model
            changes the property value.
            <para />
            This mode does not map any values from the view model to the model, thus can also
            be seen as read-only mode.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.OneWayToSource">
            <summary>
            Automatically maps the property from the view model to the model if the view model
            changes the property value.
            <para />
            This mode does not map any values from the model to the view model, but still keeps track
            of all validation that occurs in the model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelToModelMode.Explicit">
            <summary>
            Automatically maps properties from the model to the view model as soon as the is initialized. As 
            soon as a property value changes in the model, the view model value is updated instantly. However,
            the mapping from the view model to model is explicit.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelAttribute">
            <summary>
            Attribute to link a property in a view model to a model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> class.
            </summary>
            <param name="model">The property name that holds the model object.</param>
            <param name="property">The property of the model object that should be linked to the <see cref="T:Catel.MVVM.ViewModelBase"/> property.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="model"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Model">
            <summary>
            Gets the property name that holds the model object.
            <para/>
            Must be a property on the <see cref="T:Catel.MVVM.ViewModelBase"/> implementation, but is allowed to be private.
            </summary>
            <value>The model property name.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Property">
            <summary>
            Gets the property of the model object that should be linked to the <see cref="T:Catel.MVVM.ViewModelBase"/> property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Mode">
            <summary>
            Gets or sets the mode of the mapping.
            <para/>
            The default value is <see cref="F:Catel.MVVM.ViewModelToModelMode.TwoWay"/>.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelClosedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for the <see cref="E:Catel.MVVM.IViewModel.Closed"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelClosedEventArgs.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelClosedEventArgs"/> class.
            </summary>
            <param name="result">The result to pass to the view. This will, for example, be used as <c>DialogResult</c>.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelClosedEventArgs.Result">
            <summary>
            Gets the result to pass to the view. This will, for example, be used as <c>DialogResult</c>
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelExtensions">
            <summary>
            Extension methods for view model classes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.GetValidationSummary(Catel.MVVM.ViewModelBase,System.Boolean)">
            <summary>
            Gets the validation summary for the specified <paramref name="viewModel"/> and, if specified, the children as well.
            <para/>
            This method does not filter on any tag.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="includeChildViewModelValidations">if set to <c>true</c>, all validation from all child view models should be gathered as well.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.GetValidationSummary(Catel.MVVM.ViewModelBase,System.Boolean,System.Object)">
            <summary>
            Gets the validation summary for the specified <paramref name="viewModel"/> and, if specified, the children as well.
            <para/>
            This method also filters on the specified tag.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="includeChildViewModelValidations">if set to <c>true</c>, all validation from all child view models should be gathered as well.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelExtensions.GetNestedValidationContext(Catel.MVVM.ViewModelBase,System.Boolean)">
            <summary>
            Gets the nested validation context. If <paramref name="recursive"/> is <c>true</c>, the validation context returned
            will include all validation from all registered children.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="recursive">if set to <c>true</c>, the validation context will be merged with all children.</param>
            <returns>
            A combined <see cref="T:Catel.Data.IValidationContext"/> of all the child view models and the <paramref name="viewModel"/> itself.
            </returns>
            <remarks>
            This method does not check for arguments for performance reasons and because it's private.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.IViewModelContainer">
            <summary>
            Defines a control as a <see cref="T:Catel.MVVM.IViewModel"/> container.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IViewModelContainer.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.MVVM.IViewModelContainer.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.IViewModelContainer.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModelContainer.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.MVVM.IViewModelContainer.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModelContainer.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.IViewModelLocator">
            <summary>
            Resolver that will resolve view model types based on the view type. For example, if a view with the type
            name <c>MyAssembly.Views.PersonView</c> is inserted, this could result in the view model type
            <c>MyAssembly.ViewModels.PersonViewModel</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModelLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model in the local cache. This cache will also be used by the 
            <see cref="M:Catel.MVVM.IViewModelLocator.ResolveViewModel(System.Type)"/> method.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.IViewModelLocator.ResolveViewModel(System.Type)">
            <summary>
            Resolves a view model type by the view and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewType">Type of the view to resolve the view model for.</param>
            <returns>The resolved view model or <c>null</c> if the view model could not be resolved.</returns>
            <remarks>
            Keep in mind that all results are cached. The cache itself is not automatically cleared when the
            <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed. If the <see cref="P:Catel.MVVM.ILocator.NamingConventions"/> are changed,
            the cache must be cleared manually.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.MVVM.ManagedViewModel">
            <summary>
            Represents a managed view model. A managed view model is watched for property changes. As soon as a change occurs in one of the
            managed view models, all other interested view models are notified of the changes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel.Log">
            <summary>
            The <see cref="T:Catel.Logging.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel._viewModelInstances">
            <summary>
            List of alive view model instances.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel._interestedViewModels">
            <summary>
            List of alive view model instances that are interested in other view models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ManagedViewModel"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.Clear">
            <summary>
            Clears all the currently registered view models.
            </summary>
            <remarks>
            This method should only be called during unit testing.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.AddViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Adds a view model instance to the list of instances.
            </summary>
            <param name="viewModel">The view model instance to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.WrongViewModelTypeException">The <paramref name="viewModel"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.RemoveViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Removes a view model instance from the list of instances.
            </summary>
            <param name="viewModel">The view model instance to remove.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.AddInterestedViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Adds a view model to the list of interested view models for this view model type.
            </summary>
            <param name="viewModel">The view model instance that is interested in changes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.RemoveInterestedViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Removes a view model from the list of interested view models for this view model type.
            </summary>
            <param name="viewModel">The view model instance that is interested in changes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the ViewModel instances.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelCommandExecuted(System.Object,Catel.MVVM.CommandExecutedEventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.CommandExecuted"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelSaving(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Saving"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelSaved(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Saved"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelCanceling(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Canceling"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelCanceled(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Canceled"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Canceled"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnInterestedViewModelClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBase.Closed"/> event is raised.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.NotifyViewModelsOfEvent(Catel.MVVM.IViewModel,Catel.MVVM.ViewModelEvent,System.EventArgs)">
            <summary>
            Notifies all interested view models of an event that took place.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="viewModelEvent">The view model event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.MVVM.ManagedViewModel.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="P:Catel.MVVM.ManagedViewModel.ViewModelCount">
            <summary>
            Gets the view model count.
            </summary>
            <value>The view model count.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelEvent">
            <summary>
            Available view model events that can be retrieved via the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Saving">
            <summary>
            Saving event, invoked when a view model is about to be saved.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Saved">
            <summary>
            Saved event, invoked when a view model has been saved successfully.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Canceling">
            <summary>
            Canceling event, invoked when a view model is about to be canceled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Canceled">
            <summary>
            Canceled event, invoked when a view model has been canceled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelEvent.Closed">
            <summary>
            Closed event, invoked when the view model is closed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelLocator">
            <summary>
            Resolver that will resolve view model types based on the view type. For example, if a view with the type
            name <c>MyAssembly.Views.PersonView</c> is inserted, this could result in the view model type
            <c>MyAssembly.ViewModels.PersonViewModel</c>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model in the local cache. This cache will also be used by the
            <see cref="M:Catel.MVVM.ViewModelLocator.ResolveViewModel(System.Type)"/> method.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.ResolveViewModel(System.Type)">
            <summary>
            Resolves a view model type by the view and the registered <see cref="P:Catel.MVVM.ILocator.NamingConventions"/>.
            </summary>
            <param name="viewType">Type of the view to resolve the view model for.</param>
            <returns>The resolved view model or <c>null</c> if the view model could not be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.ResolveNamingConvention(System.String,System.String,System.String)">
            <summary>
            Resolves a single naming convention.
            <para/>
            This method is abstract because each locator should or could use its own naming convention to resolve
            the type. The <see cref="M:Catel.MVVM.LocatorBase.Resolve(System.String)"/> method has prepared all the values such as the assembly name and the
            only thing this method has to do is to actually resolve a string value based on the specified naming convention.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="typeToResolveName">The full type name of the type to resolve.</param>
            <param name="namingConvention">The naming convention to use for resolving.</param>
            <returns>The resolved naming convention.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelLocator.GetDefaultNamingConventions">
            <summary>
            Gets the default naming conventions.
            </summary>
            <returns>An enumerable of default naming conventions.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Catel.MVVM.ViewModelManager">
            <summary>
            Manager for view models. Thanks to this manager, it is possible to subscribe to other view models and be able to respond
            correctly to property changes in other views.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager.Log">
            <summary>
            The <see cref="T:Catel.Logging.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._instances">
            <summary>
            List of all live instances of the view model managers.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._managedViewModels">
            <summary>
            Dictionary containing all the managed view models by this view model manager.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelManager"/> class.
            </summary>
            <remarks>
            The constructor is private because this is a singleton class.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.ClearAll">
            <summary>
            Clears all the current view model managers.
            </summary>
            <remarks>
            This method should only be called during unit testing.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.Clear">
            <summary>
            Clears all the view models in the manager.
            </summary>
            <remarks>
            This method should only be called during unit testing.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RegisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Registers a view model instance with the manager. All view models must register themselves to the manager.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RegisterViewModelInstanceInternal(Catel.MVVM.IViewModel)">
            <summary>
            Registers a view model instance with the manager. All view models must register themselves to the manager.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.
            </summary>
            <param name="viewModel">The view model to unregister.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterViewModelInstanceInternal(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.
            </summary>
            <param name="viewModel">The view model to unregister.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.AddInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Adds an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically register
            itself to the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> is interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.AddInterestedViewModelInstanceInternal(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Adds an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically register
            itself to the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> is interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RemoveInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Removes an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically unregister
            itself from the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> was interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RemoveInterestedViewModelInstanceInternal(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Removes an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically unregister
            itself from the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> was interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetManagedViewModel(System.Type)">
            <summary>
            Gets the managed view model for a specific view model type.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <returns>The <see cref="T:Catel.MVVM.ManagedViewModel"/> of the specified type.</returns>
        </member>
        <member name="P:Catel.MVVM.ViewModelManager.ViewModelCount">
            <summary>
            Gets the view model count.
            </summary>
            <value>The view model count.</value>
        </member>
        <member name="T:Catel.MVVM.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.Apply">
            <summary>
              Looks up a localized string similar to Apply.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.ErrorTitle">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.Failed">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.InfoBarMessageControlErrorTitle">
            <summary>
              Looks up a localized string similar to The following warnings and/or errors were found (hover to view):.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.InfoTitle">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.PleaseWait">
            <summary>
              Looks up a localized string similar to Please wait.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.WarningTitle">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControlMode">
            <summary>
            The display mode for the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControlMode.Inline">
            <summary>
            Displays the control inline, which means all controls below are moved down a bit when the
            control becomes visible.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControlMode.Overlay">
            <summary>
            Displays the control as an overlay, which might lead to overlapping of existing controls.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControl">
            <summary>
            Control for displaying messages to the user.
            </summary>
            <remarks>
            A long, long, long time ago, the messages were hold in a dependency property (DP). However, even though DP values are
            not static, several instances that were open at the same time were still clearing eachother values (thus it seemed the
            DP behaves like it's a static member). Therefore, the messages are now hold in a field, and all problems are now gone.
            <para />
            And the control lived happily ever after.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.ElementMessageBar">
            <summary>
            The bar that will show the initial message bar.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.ModeProperty">
            <summary>
            DependencyProperty definition as the backing store for Mode.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.InfoMessageProperty">
            <summary>
            DependencyProperty definition as the backing store for InfoMessage.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.MessageCountProperty">
            <summary>
            Definition of the dependency property is private.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnModeChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.InfoBarMessageControl.Mode"/> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.SubscribeToEvents">
            <summary>
            Subscribes to events.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UnsubscribeFromEvents">
            <summary>
            Unsubscribes from events.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.ClearObjectMessages(System.Object)">
            <summary>
            Clears the object messages for the specified binding object.
            </summary>
            <param name="bindingObject">The binding object.</param>
            <remarks>
            This method is implemented because of the DataContext issue (DataContext cannot be changed before a
            user control is loaded, and therefore might be binding to the wrong object).
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.IgnoreObject(System.Object)">
            <summary>
            Adds an object to the ignore list so this control does not show messages for the specified object any longer.
            </summary>
            <param name="bindingObject">The binding object.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnInfoBarMessageErrorValidation(System.Object,System.Windows.Controls.ValidationErrorEventArgs)">
            <summary>
            Handling data errors.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnInfoBarMessageValidation(System.Object,Catel.Windows.Controls.ValidationEventArgs)">
            <summary>
            Handling business data errors.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.GetBindingObject(System.Object)">
            <summary>
            Gets the binding object.
            </summary>
            <param name="bindingObject">The binding object.</param>
            <returns>object from the binding.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.ProcessValidationMessage(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Process an validation message.
            </summary>
            <param name="bindingObject">The binding object which will be used as key in dictionary with error messages. Allowed to be <c>null</c> if <see cref="F:Catel.Windows.Controls.ValidationEventAction.ClearAll"/>.</param>
            <param name="message">The actual warning or error message.</param>
            <param name="action">An error event action. See <see cref="T:System.Windows.Controls.ValidationErrorEventAction"/>.</param>
            <param name="type">The validation type.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UpdateMessages">
            <summary>
            Update the content of the control with the found warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UpdatesMessageCollection(System.Collections.ObjectModel.ObservableCollection{System.String},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
            <summary>
            Updates a message collection by adding new messages and removing old ones that no longer exist.
            </summary>
            <param name="messageCollection">The message collection.</param>
            <param name="messageSource">The message source.</param>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.Mode">
            <summary>
            Gets or sets the mode in which the control is displayed.
            </summary>
            <value>The mode in which the control is displayed.</value>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.Text">
            <summary>
            Gets or sets the text to display when there are warnings and/or messages.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.InfoMessage">
            <summary>
            Info message for the info bar.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.MessageCount">
            <summary>
            Gets or sets MessageCount.
            </summary>
            <remarks>
            Wrapper for the MessageCount dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.WarningMessageCollection">
            <summary>
            Gets the warning message collection.
            </summary>
            <value>The warning message collection.</value>
            <remarks>
            This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with
            this control are open at the same time (dependency properties seem to behave static, but they shouldn't).
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.ErrorMessageCollection">
            <summary>
            Gets the error message collection.
            </summary>
            <value>The error message collection.</value>
            <remarks>
            This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with
            this control are open at the same time (dependency properties seem to behave static, but they shouldn't).
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter">
            <summary>
            Converter for the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> to determine whether the control
            should be visible for the current mode and
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not of type <see cref="T:Catel.Windows.Controls.InfoBarMessageControlMode"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.IPage">
            <summary>
            Interface defining functionality for the <see cref="T:Catel.Windows.Controls.Page"/> control.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.IUIElement">
            <summary>
            Interface defining shared members for UI elements.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.IUIElement.DataContext">
            <summary>
            Gets or sets the data context.
            </summary>
            <value>
            The data context.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUIElement.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.IUserControl">
            <summary>
            Interface defining functionality for the <see cref="T:Catel.Windows.Controls.UserControl"/> control.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.IUserControl.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelTypeEventArgs">
            <summary>
            EventArgs class which allows late-time dynamic view model determination.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelTypeEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelTypeEventArgs"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelTypeEventArgs.DataContext">
            <summary>
            Gets the data context.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelTypeEventArgs.ViewModelType">
            <summary>
            Gets or sets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs">
            <summary>
            EventArgs class which allows late-time dynamic view model determination.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs.DataContext">
            <summary>
            Gets the data context.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs.DoNotCreateViewModel">
            <summary>
            Gets or sets a value indicating whether the logic should create a view model by itself when the
            <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs.ViewModel"/> is <c>null</c>.
            <para/>
            By default, this value is <c>false</c>.
            </summary>
            <value><c>true</c> if the logic should not create a view model by itself; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase">
            <summary>
            Base implementation of the behaviors, which defines all the different possible situations
            a behavior must implement / support to be a valid MVVM provider behavior.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase._viewModel">
            <summary>
            The view model instances currently held by this provider. This value should only be used
            inside the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property. For accessing the view model, use the 
            <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase._isFirstValidationAfterLoaded">
            <summary>
            Boolean representing whether this is the first validation after the control has been loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.#ctor(System.Windows.FrameworkElement,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> class.
            </summary>
            <param name="targetControl">The target control.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CreateViewModelByUsingDataContextOrConstructor">
            <summary>
            Creates a view model by using data context or, if that is not possible, the constructor of the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelChanging">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property is about to change.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has just been changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model has changed.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will call the <see cref="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlLoaded(System.Object,System.EventArgs)"/> which can be overriden for custom 
            behavior. This method is required to protect from duplicate loaded events.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been loaded.
            <para/>
            The base implementation will try to create a view model based on the current DataContext and
            set it as the DataContext of the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/>. To create custom logic for
            view model creation, override this method and do not call the base.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This method will call the <see cref="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlUnloaded(System.Object,System.EventArgs)"/> which can be overriden for custom 
            behavior. This method is required to protect from duplicate unloaded events.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnTargetControlPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelCanceled(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been saved.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelSaved(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been saved.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.ViewModelClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ValidateViewModel">
            <summary>
            Validates the view model.
            </summary>
            <returns><c>true</c> if the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CancelViewModel">
            <summary>
            Cancels the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CancelAndCloseViewModel">
            <summary>
            Cancels and closes the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.SaveViewModel">
            <summary>
            Saves the view model.
            </summary>
            <returns><c>true</c> if the view model is successfully saved; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.SaveAndCloseViewModel">
            <summary>
            Saves and closes the view model. If the saving fails, the view model is not closed.
            </summary>
            <returns><c>true</c> if the view model is successfully saved; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.CloseViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ConstructViewModelUsingArgumentOrDefaultConstructor(System.Object)">
            <summary>
            Tries to construct the view model using the argument. If that fails, it will try to use
            the default constructor of the view model. If that is not available, <c>null</c> is returned.
            </summary>
            <param name="injectionObject">The object that is injected into the view model constructor.</param>
            <returns>
            Constructed view model or <c>null</c> if the view model could not be constructed.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ConstructViewModelUsingArgumentOrDefaultConstructor(System.Object,System.Type)">
            <summary>
            Tries to construct the view model using the argument. If that fails, it will try to use
            the default constructor of the view model. If that is not available, <c>null</c> is returned.
            </summary>
            <param name="injectionObject">The object that is injected into the view model constructor.</param>
            <param name="viewModelType">Type of the view model.</param>
            <returns>Constructed view model or <c>null</c> if the view model could not be constructed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
            <remarks>
            When a new value is set, the old view model will be disposed.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl">
            <summary>
            Gets the target control of this MVVM provider.
            </summary>
            <value>The target control.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.IsTargetControlLoaded">
            <summary>
            Gets a value indicating whether the target control is loaded or not.
            </summary>
            <value>
            	<c>true</c> if the target control is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.DetermineViewModelInstance">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically instantiated view model.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.DetermineViewModelType">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically determined view model type.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the current <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelCanceled">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been canceled.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelSaved">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been saved.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModelClosed">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has been closed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1">
            <summary>
            Base class for pages or controls containing navigation logic.
            </summary>
            <typeparam name="T">Type of the control or page.</typeparam>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.#ctor(`0,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic"/> class.
            </summary>
            <param name="targetPage">The page this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetPage"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnTargetControlLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnNavigating(System.Object,System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Application.Navigating"/> event is invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Navigation.NavigatingCancelEventArgs"/> instance containing the event data.</param>
            <remarks>
            This method is public due to the face that weak events are used. Otherwise, the navigation completed events
            could not be handled (because we unsubscribed from the _rootFrame) when navigating away to prevent memory
            leaks.
            <para/>
            Please, do not call this method yourself, otherwise you can seriously ruin your apps.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnNavigated(System.Object,System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Application.Navigated"/> event is invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Navigation.NavigationEventArgs"/> instance containing the event data.</param>
            <remarks>
            This method is public due to the face that weak events are used. Otherwise, the navigation completed events
            could not be handled (because we unsubscribed from the _rootFrame) when navigating away to prevent memory
            leaks.
            <para/>
            Please, do not call this method yourself, otherwise you can seriously ruin your apps.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.HandleNavigated">
            <summary>
            Handles the navigated event.
            </summary>
            <remarks>
            This is a separate method and not handled in the <see cref="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnNavigated(System.Object,System.Windows.Navigation.NavigationEventArgs)"/> method because it should be
            possible to call this without actually having event args.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.InitializeNavigationService(System.Boolean)">
            <summary>
            Initializes the navigation service. If the navigation service is already initialized, it won't be initialized
            again. However, sometimes the RootFrame of a windows phone 7 application is not yet available at startup. Therefore,
            this method must be called in both the constructor and the <see cref="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.OnTargetControlLoaded(System.Object,System.EventArgs)"/> methods.
            </summary>
            <param name="isComingFromLoadedEvent">if set to <c>true</c>, this method is called from the loaded event, which means
            that the <c>Navigated</c> event already occurred and must be invoked manually.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.EnsureViewModel">
            <summary>
            Ensures that there is a valid view model. This is a separate method because the view model can be constructed
            in the constructor, but also in the OnLoaded event because of the tombstoning capabilities of Windows Phone 7.
            <para/>
            If there already is a view model, this method will do nothing.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.CompleteNavigation(System.Object)">
            <summary>
            Completes the navigation.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.GetUriWithoutParameters(System.Uri)">
            <summary>
            Gets the URI without parameters, thus <c>/Pages/MyView.xaml?id=1</c> will be returned as
            <c>/Pages/MyView.xaml</c>/
            </summary>
            <param name="uri">The URI.</param>
            <returns>The URI without parameters.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.GetUriWithoutParameters(System.String)">
            <summary>
            Gets the URI without parameters, thus <c>/Pages/MyView.xaml?id=1</c> will be returned as
            <c>/Pages/MyView.xaml</c>/
            </summary>
            <param name="uri">The URI.</param>
            <returns>The URI without parameters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="uri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.TargetPage">
            <summary>
            Gets the target page.
            </summary>
            <value>The target page.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.NavigationLogicBase`1.NavigatingAwaySavesViewModel">
            <summary>
            Gets or sets a value indicating whether navigating away from the page should save the view model.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if navigating away should save the view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic">
            <summary>
            MVVM Provider behavior implementation for a navigation page.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic.#ctor(System.Windows.Controls.Page,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.NavigationPageLogic"/> class.
            </summary>
            <param name="targetPage">The page this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetPage"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic">
            <summary>
            MVVM Provider behavior implementation for a user control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic._viewModelGrid">
            <summary>
            The grid that is injected into every user control to use as data context container
            with the view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.#ctor(System.Windows.Controls.UserControl,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic"/> class.
            </summary>
            <param name="targetControl">The target control.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetControl"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlContentChanged(System.Object,Catel.Windows.Data.DependencyPropertyValueChangedEventArgs)">
            <summary>
            Called when the content of the target control has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.CreateViewModelGrid">
            <summary>
            Creates the grid that contains the view model as a data context.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has just been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnViewModelChanging">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property is about to change.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has just been changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnTargetControlDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SubscribeToParentViewModelContainer">
            <summary>
            Subscribes to the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UnsubscribeFromParentViewModelContainer">
            <summary>
            Unsubscribes from the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SubscribeToParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Subscribes to a parent view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UnsubscribeFromParentViewModel">
            <summary>
            Unsubscribes from a parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.RegisterViewModelAsChild">
            <summary>
            Registers the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UnregisterViewModelAsChild">
            <summary>
            Unregisters the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.UpdateDataContextToUseViewModel(System.Object)">
            <summary>
            Updates the data context to use view model.
            </summary>
            <param name="newDataContext">The new data context.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.CloseAndDiposeViewModel(System.Nullable{System.Boolean})">
            <summary>
            Closes and diposes the current view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnParentViewModelContainerViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ViewModelChanged event of the parent ViewModel container.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnParentViewModelCanceling(System.Object,System.EventArgs)">
            <summary>
            Handles the Canceling event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.OnParentViewModelSaving(System.Object,Catel.MVVM.SavingEventArgs)">
            <summary>
            Handles the Saving event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Catel.MVVM.SavingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.ClearWarningsAndErrorsForObject(System.Object)">
            <summary>
            Clears the warnings and errors for the specified object.
            </summary>
            <param name="obj">The object.</param>
            <remarks>
            Since there is a "bug" in the .NET Framework (DataContext issue), this method clears the current
            warnings and errors in the InfoBarMessageControl if available.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.GetParent(System.Windows.FrameworkElement)">
            <summary>
            Gets the parent of the specified element, both for Silverlight and WPF.
            </summary>
            <param name="element">The element.</param>
            <returns>The parent <see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if there is no parent.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.FindParentByPredicate(System.Windows.Controls.UserControl,System.Predicate{System.Object})">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="control">The control.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            	<see cref="T:System.Windows.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.FindParentByPredicate(System.Windows.Controls.UserControl,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="control">The control.</param>
            <param name="predicate">The predicate.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>
            	<see cref="T:System.Windows.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.TargetControl">
            <summary>
            Gets the target control.
            </summary>
            <value>The target control.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is determined by the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.DefaultSkipSearchingForInfoBarMessageControlValue"/> property.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.DefaultSkipSearchingForInfoBarMessageControlValue">
            <summary>
            Gets or sets a value for the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.SkipSearchingForInfoBarMessageControl"/> property. This way, the behavior
            can be changed an entire application to prevent disabling it on every control.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>The default value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.HasParentViewModelContainer">
            <summary>
            Gets a value indicating whether there is a parent view model container available.
            </summary>
            <value>
            	<c>true</c> if there is a parent view model container available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.ParentViewModelContainer">
            <summary>
            Gets the parent view model container.
            </summary>
            <value>The parent view model container.</value>
            <remarks>
            For internal usage only.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.IsSubscribedToParentViewModel">
            <summary>
            Gets a value indicating whether this instance is subscribed to a parent view model.
            </summary>
            <value>
            	<c>true</c> if this instance is subscribed to a parent view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic">
            <summary>
            MVVM Provider behavior implementation for a window.
            </summary>
            <remarks>
            Some parts in this class (with the instances and increments), but this is required to dynamically subscribe to
            an even that we do not know the handler of on forehand. Normally, you would do this via an anynomous delegate, 
            but that doesn't work so the event delegate is created via ILGenerator at runtime.
            <para />
            http://stackoverflow.com/questions/8122085/calling-an-instance-method-when-event-occurs/8122242#8122242.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.#ctor(System.Windows.Window,System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic"/> class.
            </summary>
            <param name="targetWindow">The window this provider should take care of.</param>
            <param name="viewModelType">Type of the view model.</param>
            <param name="viewModel">The view model to inject.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetWindow"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="viewModelType"/> does not implement interface <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.OnTargetControlUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.TargetControl"/> has just been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> is closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.ViewModelClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.OnTargetWindowClosed">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.TargetWindow"/> has been closed.
            </summary>
            <remarks>
            Public to allow the generated ILGenerator to access this method.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.Logic.WindowLogic.TargetWindow">
            <summary>
            Gets the target control as window object.
            </summary>
            <value>The target window.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior"/> base implementation that takes care of generic MVVM behavior logic.
            </summary>
            <typeparam name="TAttachedType">The type of the attached type.</typeparam>
            <typeparam name="TLogicType">The type of the logic type.</typeparam>
        </member>
        <member name="T:Catel.Windows.Interactivity.BehaviorBase`1">
            <summary>
            Behavior base class that handles a safe unsubscribe and clean up because the default
            behavior class does not always call <see cref="M:System.Windows.Interactivity.Behavior.OnDetaching"/>.
            <para/>
            This class also adds some specific features such as <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.ValidateRequiredProperties"/>
            which is automatically called when the behavior is attached.
            </summary>
            <typeparam name="T">The <see cref="T:System.Windows.FrameworkElement"/> this behavior should attach to.</typeparam>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This method is called when the object is attached, but before
            the <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.Initialize"/> is invoked.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.Initialize">
            <summary>
            Initializes the behavior. This method is called instead of the <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAttached"/> which is sealed
            to protect the additional behavior.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.Uninitialize">
            <summary>
            Uninitializes the behavior. This method is called when <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching"/> is called, or when the
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            <para/>
            If dependency properties are used, it is very important to use 
            <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"/> to clear the value
            of the dependency properties in this method.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded. This method is introduced to prevent
            double initialization when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is already loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded. This method is introduced to prevent
            double uninitialization when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is already unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.BehaviorBase`1.CleanUp">
            <summary>
            Actually cleans up the behavior because <see cref="M:Catel.Windows.Interactivity.BehaviorBase`1.OnDetaching"/> is not always called.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.BehaviorBase`1.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelTypeProperty">
            <summary>
            DependencyProperty definition as the backing store for ViewModelType.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.DesignTimeViewModelTypeProperty">
            <summary>
            DependencyProperty definition as the backing store for DesignTimeViewModelType.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This implementation checks for the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelType"/>,
            which is mandatory.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelType"/> is not set.</exception>
            <remarks>
            When this method is overriden, don't forget to call the base.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <remarks>
            When this method is overriden, don't forget to call the base.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Uninitialize">
            <summary>
            Uninitializes this instance.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.OnDetermineViewModelInstance(System.Object,Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs)">
            <summary>
            Called when the <see cref="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.DetermineViewModelInstance"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelInstanceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.OnDetermineViewModelType(System.Object,Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelTypeEventArgs)">
            <summary>
            Called when the <see cref="E:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.DetermineViewModelType"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.DetermineViewModelTypeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.OnLogicViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.OnLogicViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase.ViewModel"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Logic">
            <summary>
            Gets the logic.
            </summary>
            <value>The logic.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelType">
            <summary>
            Gets or sets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
            <remarks>
            This is a dependency property because the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Logic"/> itself has no setter. Therefore, this
            can be set in xaml and will be used in derived classes to construct the logic.
            <para/>
            Also, the logic is not constructed when the xaml of the behavior is parsed, so it has to be used later.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.DesignTimeViewModelType">
            <summary>
            Gets or sets the type of the design time view model.
            </summary>
            <value>The type of the design time view model.</value>
            <remarks>
            This is a dependency property because the logic is not constructed when the xaml of the behavior is 
            parsed, so it has to be used later.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModel">
            <summary>
            Gets the view model attached to this behavior.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.DetermineViewModelInstance">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically instantiated view model.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.DetermineViewModelType">
            <summary>
            Occurs when the view model is about to construct a new view model. This event can be used to
            intercept and inject a dynamically determined view model type.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelChanged">
            <summary>
            Raised when the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModel"/> is changed by the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.Logic"/>.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModelPropertyChanged">
            <summary>
            Raised when a property on the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the target control is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.NavigationPageBehavior">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior"/> implementation for a <see cref="T:System.Windows.Controls.Page"/>. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.NavigationPageBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.NavigationPageBehavior.NavigatingAwaySavesViewModel">
            <summary>
            Gets or sets a value indicating whether navigating away from the page should save the view model.
            <para />
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if navigating away should save the view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.UserControlBehavior">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior"/> implementation for a user control. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is determined by the <see cref="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.DefaultSkipSearchingForInfoBarMessageControlValue"/> property.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.DefaultSkipSearchingForInfoBarMessageControlValue">
            <summary>
            Gets or sets a value for the <see cref="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.SkipSearchingForInfoBarMessageControl"/> property. This way, the behavior
            can be changed an entire application to prevent disabling it on every control.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>The default value.</value>
            <remarks>
            Internally this value uses the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.DefaultSkipSearchingForInfoBarMessageControlValue"/> property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.UserControlBehavior.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior">
            <summary>
            A <see cref="T:System.Windows.Interactivity.Behavior`1"/> implementation for a window. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.CreateLogic">
            <summary>
            Creates the logic required for MVVM.
            </summary>
            <returns>The <see cref="T:Catel.Windows.Controls.MVVMProviders.Logic.LogicBase"/> implementation uses by this behavior.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.MVVMProviders.MVVMBehaviorBase`2.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            The behavior is initialized when the associated object is loaded because the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget"/>
            class requires loaded associated objects.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Uninitialize">
            <summary>
            Uninitializes this instance.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnSaved(System.Object,System.EventArgs)">
            <summary>
            Called when the save event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnSavedAndClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the save and close event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnCanceled(System.Object,System.EventArgs)">
            <summary>
            Called when the cancel event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnCanceledAndClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the cancel and close event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.OnClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the close event is invoked by a subscribed control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Save">
            <summary>
            Gets or sets the save action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The save action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.SaveAndClose">
            <summary>
            Gets or sets the save and close action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The save action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Cancel">
            <summary>
            Gets or sets the cancel action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The cancel action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.CancelAndClose">
            <summary>
            Gets or sets the cancel and close action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The cancel action.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.Close">
            <summary>
            Gets or sets the close action.
            <para />
            The format is [controlname].[event]. By default, the <c>Click</c> event is used, thus for
            a button [controlname] is sufficient.
            <para />
            This property is not required, but if it is used, it must be valid otherwise an exception will be thrown.
            </summary>
            <value>The cancel action.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget">
            <summary>
            Class that parses an event target in the form of [controlname].[event].
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.#ctor(System.Windows.Window,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget"/> class.
            </summary>
            <param name="associatedObject">The associated object.</param>
            <param name="eventTarget">The event target as string representation.</param>
            <remarks>
            If the parsing fails, no exception will be thrown but the <see cref="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.ControlName"/>
            and <see cref="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.EventName"/> will remain empty.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="associatedObject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="eventTarget"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="associatedObject"/> is not yet loaded.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.OnEvent``1(System.Object,``0)">
            <summary>
            Called when the event on the target occurs.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.CleanUp">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.ControlName">
            <summary>
            Gets or sets the name of the control.
            </summary>
            <value>The name of the control.</value>
        </member>
        <member name="P:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.EventName">
            <summary>
            Gets or sets the event name.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="E:Catel.Windows.Controls.MVVMProviders.WindowBehavior.EventTarget.Event">
            <summary>
            Occurs when the specified event occurs.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.Page">
            <summary>
            <see cref="T:Catel.Windows.Controls.Page"/> class that supports MVVM with Catel.
            </summary>
            <remarks>
            This control can resolve a view model in the following ways:<para/>
            <list type="numbered">
              <item>
                <description>By using the <see cref="M:Catel.Windows.Controls.Page.GetViewModelType"/> method.</description>
              </item>
              <item>
                <description>By using the <see cref="T:Catel.MVVM.IViewModelLocator"/> which is registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.</description>
              </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The view model of the view could not be resolved. Use either the <see cref="M:Catel.Windows.Controls.Page.GetViewModelType"/> method or <see cref="T:Catel.MVVM.IViewModelLocator"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.Page.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.Page"/> class.
            <para/>
            Registers the <see cref="T:Catel.MVVM.IViewModelLocator"/> in the <see cref="T:Catel.IoC.IServiceLocator"/> if it is not yet registered.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.Page.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.Page"/> class.
            </summary>
            <remarks>
            It is not possible to inject view models.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.Page.GetViewModelType">
            <summary>
            Gets the type of the view model. If this method returns <c>null</c>, the view model type will be retrieved by naming 
            convention using the <see cref="T:Catel.MVVM.IViewModelLocator"/> registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.Page.GetViewModelType(System.Object)">
            <summary>
            Gets the type of the view model at runtime based on the <see cref="P:System.Windows.FrameworkElement.DataContext"/>. If this method returns 
            <c>null</c>, the earlier determined view model type will be used instead.
            </summary>
            <param name="dataContext">The data context. This value can be <c>null</c>.</param>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
            <remarks>
            Note that this method is only called when the <see cref="P:System.Windows.FrameworkElement.DataContext"/> changes.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.Page.GetViewModelInstance(System.Object)">
            <summary>
            Gets the instance of the view model at runtime based on the <see cref="P:System.Windows.FrameworkElement.DataContext"/>. If this method returns 
            <c>null</c>, the logic will try to construct the view model by itself.
            </summary>
            <param name="dataContext">The data context. This value can be <c>null</c>.</param>
            <returns>The instance of the view model or <c>null</c> in case it should be auto created.</returns>
            <remarks>
            Note that this method is only called when the <see cref="P:System.Windows.FrameworkElement.DataContext"/> changes.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnLoaded(System.EventArgs)">
            <summary>
            Called when the page is loaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnUnloaded(System.EventArgs)">
            <summary>
            Called when the page is unloaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.Controls.Page.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.Page.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.Page.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.Page.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="P:Catel.Windows.Controls.Page.ViewModelType">
            <summary>
            Gets the type of the view model that this user control uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.Page.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.Windows.Controls.Page.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.Page.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.Page.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.Page.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.Controls.Page.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.UserControl">
            <summary>
            <see cref="T:Catel.Windows.Controls.UserControl"/> that supports MVVM by using a <see cref="T:Catel.MVVM.IViewModel"/> typed parameter.
            If the user control is not constructed with the right view model by the developer, it will try to create
            the view model itself. It does this by keeping an eye on the <c>DataContext</c> property. If
            the property changes, the control will check the type of the DataContext and try to create the view model by using
            the DataContext value as the constructor. If the view model can be constructed, the DataContext of the UserControl will
            be replaced by the view model.
            </summary>
            <remarks>
            This control can resolve a view model in the following ways:<para/>
            <list type="numbered">
              <item>
                <description>By using the <see cref="M:Catel.Windows.Controls.UserControl.GetViewModelType"/> method.</description>
              </item>
              <item>
                <description>By using the <see cref="T:Catel.MVVM.IViewModelLocator"/> which is registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.</description>
              </item>
            </list>
            <para/>
            This control suffers a lot from the bugs, or features "by design" as Microsoft likes to call it, of WPF. Below are the most 
            common issues that this control suffers from:
            <list type="number">
              <item>
                <description>WPF sometimes invokes the Loaded multiple times, without invoking Unloaded.</description>
              </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The view model of the view could not be resolved. Use either the <see cref="M:Catel.Windows.Controls.UserControl.GetViewModelType"/> method or <see cref="T:Catel.MVVM.IViewModelLocator"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl"/> class.
            <para/>
            Registers the <see cref="T:Catel.MVVM.IViewModelLocator"/> in the <see cref="T:Catel.IoC.IServiceLocator"/> if it is not yet registered.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement"/> class.
            </summary>
            <remarks>
            This method is required for design time support.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.GetViewModelType">
            <summary>
            Gets the type of the view model. If this method returns <c>null</c>, the view model type will be retrieved by naming 
            convention using the <see cref="T:Catel.MVVM.IViewModelLocator"/> registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.GetViewModelType(System.Object)">
            <summary>
            Gets the type of the view model at runtime based on the <see cref="P:System.Windows.FrameworkElement.DataContext"/>. If this method returns 
            <c>null</c>, the earlier determined view model type will be used instead.
            </summary>
            <param name="dataContext">The data context. This value can be <c>null</c>.</param>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
            <remarks>
            Note that this method is only called when the <see cref="P:System.Windows.FrameworkElement.DataContext"/> changes.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.GetViewModelInstance(System.Object)">
            <summary>
            Gets the instance of the view model at runtime based on the <see cref="P:System.Windows.FrameworkElement.DataContext"/>. If this method returns 
            <c>null</c>, the logic will try to construct the view model by itself.
            </summary>
            <param name="dataContext">The data context. This value can be <c>null</c>.</param>
            <returns>The instance of the view model or <c>null</c> in case it should be auto created.</returns>
            <remarks>
            Note that this method is only called when the <see cref="P:System.Windows.FrameworkElement.DataContext"/> changes.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has changed.
            </summary>
            <remarks>
            This method does not implement any logic and saves a developer from subscribing/unsubscribing
            to the <see cref="E:Catel.Windows.Controls.UserControl.ViewModelChanged"/> event inside the same user control.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnLoaded(System.EventArgs)">
            <summary>
            Called when the user control is loaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnUnloaded(System.EventArgs)">
            <summary>
            Called when the user control is unloaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.ViewModelType">
            <summary>
            Gets the type of the view model that this user control uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.CloseViewModelOnUnloaded">
            <summary>
            Gets or sets a value indicating whether the user control should close any existing
            view model when the control is unloaded from the visual tree.
            <para />
            Set this property to <c>false</c> if a view model should be kept alive and re-used
            for unloading/loading instead of creating a new one.
            <para />
            By default, this value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the view model should be closed when the control is unloaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is determined by the <see cref="P:Catel.Windows.Controls.UserControl.DefaultSkipSearchingForInfoBarMessageControlValue"/> property.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.DefaultSkipSearchingForInfoBarMessageControlValue">
            <summary>
            Gets or sets a value for the <see cref="P:Catel.Windows.Controls.UserControl.SkipSearchingForInfoBarMessageControl"/> property. This way, the behavior
            can be changed an entire application to prevent disabling it on every control.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>The default value.</value>
            <remarks>
            Internally this value uses the <see cref="P:Catel.Windows.Controls.MVVMProviders.Logic.UserControlLogic.DefaultSkipSearchingForInfoBarMessageControlValue"/> property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.Controls.UserControl.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.UserControl`1">
            <summary>
            <see cref="T:Catel.Windows.Controls.UserControl"/> that supports MVVM by using a <see cref="T:Catel.MVVM.IViewModel"/> typed parameter.
            If the user control is not constructed with the right view model by the developer, it will try to create
            the view model itself. It does this by keeping an eye on the <c>DataContext</c> property. If
            the property changes, the control will check the type of the DataContext and try to create the view model by using
            the DataContext value as the constructor. If the view model can be constructed, the DataContext of the UserControl will
            be replaced by the view model.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <remarks>
            Starting with Catel 3.0, the <see cref="T:Catel.Windows.Controls.UserControl`1"/> now derives from <see cref="T:Catel.Windows.Controls.UserControl"/> and should
            only be used when there is an actual need to specify the class as a generic. Otherwise, it is always recommend to use the
            new <see cref="T:Catel.Windows.Controls.UserControl"/> which is not generic and can determine the view model by itself.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl`1"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.GetViewModelType">
            <summary>
            Gets the type of the view model. If this method returns <c>null</c>, the view model type will be retrieved by naming convention.
            </summary>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="T:Catel.Windows.Controls.VisualWrapper">
            <summary>
            This visual wrapper is used by VisualTargetPresentationSource
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.VisualWrapper.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.VisualWrapper.Child">
            <summary>w
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="P:Catel.Windows.Controls.VisualWrapper.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationType">
            <summary>
            Business validation type.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventAction">
            <summary>
            Validation event action.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Added">
            <summary>
            Added.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Removed">
            <summary>
            Removed.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Refresh">
            <summary>
            Refresh the validation, don't add or remove.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.ClearAll">
            <summary>
            All validation info of the specified object should be cleared.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.WarningAndErrorValidator">
            <summary>
            Control for adding business rule validation to the form. Assign a value or binding to source for the business object or 
            collection of bussiness objects to validate.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator._objectValidation">
            <summary>
            List of objects that are currently being validated. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator.SourceProperty">
            <summary>
            DependencyProperty definition as the backing store for Source.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.OnUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.Initialize">
            <summary>
            Initializes this instance. Loads all the errors and warnings that were added when the control was not yet loaded.s
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CleanUp">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.UpdateSource(System.Object,System.Object)">
            <summary>
            Updates the source.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectsToWatchList(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Adds an <see cref="T:System.Collections.IEnumerable"/> of objects to the watch list.
            </summary>
            <param name="values">The values to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="values"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectToWatchList(System.Object,System.Collections.IEnumerable)">
            <summary>
            Adds the object to the watch list.
            </summary>
            <param name="value">The object to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectsFromWatchList(System.Collections.IEnumerable)">
            <summary>
            Removes an <see cref="T:System.Collections.IEnumerable"/> of objects from the watch list.
            </summary>
            <param name="values">The values to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectFromWatchList(System.Object)">
            <summary>
            Removes the object from watch list.
            </summary>
            <param name="value">The object to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidation(System.Object,System.String,System.Collections.IEnumerable)">
            <summary>
            Checks a entity that either implements the <see cref="T:System.ComponentModel.IDataWarningInfo"/> or <see cref="T:System.ComponentModel.IDataErrorInfo"/> on warnings and errors.
            </summary>
            <param name="value">The object to check.</param>
            <param name="propertyChanged">The propery that has been changed. <c>null</c> if no specific property has changed.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
            <remarks>
            Internally calls the generic method with the same name.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidationForFields(System.Object,System.String,System.Collections.ObjectModel.ObservableCollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the object validation for fields warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="infoList">The info list containing the warning or error info.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckFieldWarningsOrErrors(System.Object,System.String,Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the field warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="validationType">Type of the validation.</param>
            <returns>
            List of warnings or errors returned by the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.GetWarningOrError(System.Object,Catel.Windows.Controls.ValidationType)">
            <summary>
            Gets the warning or error message for the object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>
            Warning or error message formatted for the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferences(System.Object,Catel.Windows.Controls.ValidationData,Catel.Windows.Controls.ValidationData)">
            <summary>
            Raises the events for differences.
            </summary>
            <param name="value">The value.</param>
            <param name="oldValidationData">The old validation data.</param>
            <param name="newValidationData">The new validation data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInFields(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in fields.
            </summary>
            <param name="value">The value.</param>
            <param name="oldFieldData">The old field data.</param>
            <param name="newFieldData">The new field data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInBusiness(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in business.
            </summary>
            <param name="value">The value.</param>
            <param name="oldBusinessData">The old business data.</param>
            <param name="newBusinessData">The new business data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseBusinessValidationWarningOrError(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises an validation warning or error event.
            </summary>
            <param name="value">The value.</param>
            <param name="message">A message.</param>
            <param name="action">A action for handling the error event.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyPropertyChanged_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handling changes of properties within entity.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyCollectionChanged_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handling change of collection updating connections and error messages.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="P:Catel.Windows.Controls.WarningAndErrorValidator.Source">
            <summary>
            Source for validation. This can be an business object which implements <see cref="T:System.ComponentModel.IDataErrorInfo"/> 
            and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or an <see cref="T:System.Collections.IEnumerable"/> containing bussiness objects.
            In case of a <see cref="T:System.Collections.IEnumerable"/> then the content should be static or the interface <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <remarks>
            Wrapper for the Source dependency property.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.WarningAndErrorValidator.Validation">
            <summary>
            Occurs when validation is triggered.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationData">
            <summary>
            Class containing all validation info (thus warnings and errors) about a specific object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationData"/> class.
            </summary>
            <param name="parentEnumerable">The parent ParentEnumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.ClearWarningsAndErrors">
            <summary>
            Clears the warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.ParentEnumerable">
            <summary>
            Gets or sets the parent enumerable.
            </summary>
            <value>The parent enumerable.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldWarnings">
            <summary>
            Gets the field warnings.
            </summary>
            <value>The field warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessWarnings">
            <summary>
            Gets the business warnings.
            </summary>
            <value>The business warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldErrors">
            <summary>
            Gets the field errors.
            </summary>
            <value>The field errors.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessErrors">
            <summary>
            Gets the business errors.
            </summary>
            <value>The business errors.</value>
        </member>
        <member name="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo">
            <summary>
            Information class about business warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Catel.Windows.Controls.FieldWarningOrErrorInfo">
            <summary>
            Information class about field warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.FieldWarningOrErrorInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Field">
            <summary>
            Gets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventArgs">
            <summary>
            Event arguments for event <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> Validation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationEventArgs.#ctor(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationEventArgs"/> class.
            </summary>
            <param name="value">The value that contains the warning or error.</param>
            <param name="message">The actual warning or error message.</param>
            <param name="action">The action of the validation event.</param>
            <param name="type">The type of validation.</param>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Value">
            <summary>
            Gets the value that contains the warning or error.
            </summary>
            <value>The value that contains the warning or error.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Message">
            <summary>
            Gets the actual warning or error message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Action">
            <summary>
            A action for handling event.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Type">
            <summary>
            Gets the type of the validation.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="T:Catel.Windows.Data.BindingEvaluator">
            <summary>
            Class to help evaluate bindings at runtime.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingEvaluator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.BindingEvaluator"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="P:Catel.Windows.Data.BindingEvaluator.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Catel.Windows.Data.Converters.AreEqualMultiValueConverter">
            <summary>
            Converts a comparison of 2 bindings to a boolean whether the 
            objects are equal or not.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.AreEqualMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the comparison of 2 values to a boolean.
            </summary>
            <param name="values">Values to convert. Only 2 values are supported.</param>
            <param name="targetType">Not supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>True if the values are equal, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.AreEqualMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
            <param name="value">Not supported.</param>
            <param name="targetTypes">Not supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter">
            <summary>
            Converts a boolean to a grayscale saturation value. If the input is <c>false</c>, this converter will
            return <c>0</c>, otherwise <c>1</c>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter">
            <summary>
            Convert a value to it's inverted value.
            </summary>
            <remarks>Currently only values of type bool are accepted.</remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts value to the inverted value.
            </summary>
            <param name="value">A value, currently only bool supported.</param>
            <param name="targetType">Currently only bool supported.</param>
            <param name="parameter">Not in use.</param>
            <param name="culture">Not in use.</param>
            <returns>The inverted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts value back, simply inverts again.
            </summary>
            <param name="value">A value, currently only bool supported.</param>
            <param name="targetType">Currently only bool supported.</param>
            <param name="parameter">Not in use.</param>
            <param name="culture">Not in use.</param>
            <returns>The inverted value.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode">
            <summary>
            Available modes for the <see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverter"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo">
            <summary>
            True becomes <c>Yes</c>, false becomes <c>No</c>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.X">
            <summary>
            True becomes <c>x</c>, false becomes <c></c> (thus empty).
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToTextConverter">
            <summary>
            BooleanToTextConverter.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverter.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a boolean value to text.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter"><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/>.</param>
            <param name="culture">Not used.</param>
            <returns>Text presentation of the boolean value.</returns>
            <remarks>
            If the parameter is invalid, or the method fails to parse the parameter, <see cref="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo"/>
            will be used to convert the value.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.ParseMode(System.String)">
            <summary>
            Parses the parameter and returns a <see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> that represents the parameter. 
            </summary>
            <param name="parameter"><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> as text.</param>
            <returns><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> as it was passed as a string.</returns>
            <remarks>
            If the parameter is invalid, or the method fails to parse the parameter, <see cref="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo"/>
            will be returned as a default value.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter">
            <summary>
            Convert from bool to <see cref="T:System.Windows.Visibility" /> and back.
            The bool value true will be converted to Visibility.Visible.
            The bool value false will be converted to Visibility.Collapsed.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.VisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.VisibilityConverterBase"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            By default, this method does nothing.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Data.Converters.VisibilityConverterBase.NotVisibleVisibility">
            <summary>
            Gets the <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.
            </summary>
            <value>The not visible visibility.</value>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert Visibility back to bool.
            </summary>
            <param name="value">A value. Only value of type <see cref="T:System.Windows.Visibility" /> is supported,</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A parameter value, currently not used.</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>
            When value is Visibility.Visible then true else false.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToHidingVisibilityConverter">
            <summary>
            Convert from bool to <see cref="T:System.Windows.Visibility" /> and back.
            The bool value true will be converted to Visibility.Visible.
            The bool value false will be converted to Visibility.Hidden.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToHidingVisibilityConverter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ColorToBrushConverter">
            <summary>
            ColorToBrushConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ContainsItemsConverter">
            <summary>
            Converter that converts whether a collection contains items or not.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ContainsItemsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the count of a collection to true or false, depending on whether the collection contains items.
            </summary>
            <param name="value">Values to check for. Both collections and arrays are supported.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>True when at least 1 item is inside the collection or array, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ContainsItemsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            This method is not supported.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.DebugConverter">
            <summary>
            Debug converter that allows to debug bindings easily and writes the output to the log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.DebugConverter.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.DebugConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.DebugConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.StringToIntConverter">
            <summary>
            Converts string to integer and back.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.StringToIntConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.StringToIntConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CountCollapsedConverter">
            <summary>
            Convert for auto collapsing of control depending on given count.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountCollapsedConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountCollapsedConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CountHiddenConverter">
            <summary>
            Convert for auto hiding of control depending on given count.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountHiddenConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountHiddenConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter">
            <summary>
            Convert from string to <see cref="T:System.Windows.Visibility"/>. 
            If the string is not null or empty, Visibility.Visible will be returned. 
            If the string is null or empty, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter">
            <summary>
            Convert from string to <see cref="T:System.Windows.Visibility"/>. 
            If the string is not null or empty, Visibility.Visible will be returned. 
            If the string is null or empty, Visibility.Hidden will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.FormattingConverter">
            <summary>
            Converter for formatting values.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.FormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.FormattingConverter"/> class.
            </summary>
            <param name="defaultFormatString">A default format string.</param>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to formatted string.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Format string.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
            <remarks>We don't intend this to ever be called.</remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter">
            <summary>
            Converts a collection containing <see cref="T:System.Windows.Controls.ValidationError"/> objects to return the first error
            or an empty string in case there are no errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a collection containing <see cref="T:System.Windows.Controls.ValidationError"/> objects to return the first error
            or an empty string in case there are no errors.
            </summary>
            <param name="value">Values to check for. Both collections and arrays are supported.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>String containing the first error or <see cref="F:System.String.Empty"/> in case there are not errors.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method isn't supported.
            </summary>
            <param name="value">Not used.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>Always null.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ConverterHelper">
            <summary>
            Converter helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.ConverterHelper.DoNothingBindingValue">
            <summary>
            The generic <c>DoNothing</c> value, compatible with WPF and Silverlight.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ConverterHelper.ShouldInvert(System.Object)">
            <summary>
            Checks whether the converted must be inverted. This checks the parameter input and checks whether
            it is a boolean.
            </summary>
            <param name="parameter">The parameter to check. Can be <c>null</c>.</param>
            <returns><c>true</c> if the converter should be inverted; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.IsSelectedConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.IsSelectedValueConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.MethodToValueConverter">
            <summary>
            Converts the result of a method to a value. This makes it possible to bind to a method.
            </summary>
            <example>
            {Binding MyObject, Converter={StaticResource MethodToValueConverter}, ConverterParameter='MyMethod'}
            </example>
            <remarks>
            Code originally comes from http://stackoverflow.com/questions/502250/bind-to-a-method-in-wpf.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MethodToValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MethodToValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.MultiplyConverter">
            <summary>
            Calculate the product of given value and factor in parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calulate the product of given value and factor in parameter.
            </summary>
            <param name="value">Base value.</param>
            <param name="targetType">Not used, supports now int and double.</param>
            <param name="parameter">Factor used for multiply (always double).</param>
            <param name="culture">Not used.</param>
            <returns>Product of specified values.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MultiplyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calculate value back.
            </summary>
            <param name="value">Base value.</param>
            <param name="targetType">Not used, supports now int and double.</param>
            <param name="parameter">Factor used for multiply (always double).</param>
            <param name="culture">Not used.</param>
            <returns>Original value.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.NullableValueConverter">
            <summary>
            Converts a value to a representive value for nullable.
            </summary>
            <remarks>Resolves problem with databinding with nullables. When textbox hasn't a value then null is expected as return value.</remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.NullableValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to targettype.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type (only types with standard conversion are supported, System.Convert.ChangeType is used for conversion).</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.NullableValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back to nullable object.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type (only types with standard conversion are supported, System.Convert.ChangeType is used for conversion).</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToBooleanConverter">
            <summary>
            Implementation of class ReferenceToBooleanConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an object reference to a boolean value.
            </summary>
            <param name="value">The object reference to evaluate.</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A additional parameter</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>
            When <paramref name="value"/> is not null the method returns true else false.
            Unless the passed <paramref name="parameter"/> parameter is true, then the
            output is inverted; meaning when <paramref name="value"/> is null the method
            returns true else false.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert nothing!
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A parameter value, currently not used.</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>Nothing, only throws an exception.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter">
            <summary>
            Convert from reference to <see cref="T:System.Windows.Visibility"/>. 
            If the reference contains a value, Visibility.Visible will be returned. 
            If the reference is null, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter">
            <summary>
            Convert from reference to <see cref="T:System.Windows.Visibility"/>. 
            If the reference contains a value, Visibility.Visible will be returned. 
            If the reference is null, Visibility.Hidden will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ShortDateFormattingConverter">
            <summary>
            ShortDateFormattingConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ShortDateFormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ShortDateFormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ShortDateFormattingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
            <remarks>We don't intend this to ever be called.</remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.IntToStringConverter">
            <summary>
            Converts integer to string and back.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IntToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IntToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ValueConverterGroup">
            <summary>
            A value converter which contains a list of IValueConverters and invokes their Convert or ConvertBack methods
            in the order that they exist in the list.  The output of one converter is piped into the next converter
            allowing for modular value converters to be chained together.  If the ConvertBack method is invoked, the
            value converters are executed in reverse order (highest to lowest index).  Do not leave an element in the
            Converters property collection null, every element must reference a valid IValueConverter instance. If a
            value converter's type is not decorated with the ValueConversionAttribute, an InvalidOperationException will be
            thrown when the converter is added to the Converters collection.
            <para />
            Known limitations: the supplied parameter is used for ALL! converters.
            </summary>
            <remarks>
            Original source: http://www.codeproject.com/KB/WPF/PipingValueConverters_WPF.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ValueConverterGroup"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.GetTargetType(System.Int32,System.Type,System.Boolean)">
            <summary>
            Returns the target type for a conversion operation.
            </summary>
            <param name="converterIndex">The index of the current converter about to be executed.</param>
            <param name="finalTargetType">The 'targetType' argument passed into the conversion method.</param>
            <param name="convert">Pass true if calling from the Convert method, or false if calling from ConvertBack.</param>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.OnConvertersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [converters collection changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Data.Converters.ValueConverterGroup.Converters">
            <summary>
            Returns the list of IValueConverters contained in this converter.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            <para/>
            This converter returns <see cref="F:System.Windows.Visibility.Collapsed"/> when a non-visible state should be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.HidingVisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            <para/>
            This converter returns <see cref="F:System.Windows.Visibility.Hidden"/> when a non-visible state should be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.HidingVisibilityConverterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.HidingVisibilityConverterBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.DataResource">
            <summary>
            Class that represents a bound property value for a non-bindable property.
            </summary>
            <remarks>
            This code originally comes from: http://www.wpfmentor.com/2009/01/how-to-add-binding-to-commandparameter.html.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Data.DataResource.BindingTargetProperty">
            <summary>
            Identifies the <see cref="P:Catel.Windows.Data.DataResource.BindingTarget"/> dependency property.
            </summary>
            <value>
            The identifier for the <see cref="P:Catel.Windows.Data.DataResource.BindingTarget"/> dependency property.
            </value>
        </member>
        <member name="M:Catel.Windows.Data.DataResource.CreateInstanceCore">
            <summary>
            Creates an instance of the specified type using that type's default constructor. 
            </summary>
            <returns>
            A reference to the newly created object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.DataResource.CloneCore(System.Windows.Freezable)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable"/>
            using base (non-animated) property values. 
            </summary>
            <param name="sourceFreezable">
            The object to clone.
            </param>
        </member>
        <member name="P:Catel.Windows.Data.DataResource.BindingTarget">
            <summary>
            Gets or sets the binding target.
            </summary>
            <value>The binding target.</value>
        </member>
        <member name="T:Catel.Windows.Data.DataResourceBindingExtension">
            <summary>
            Data resource binding extension class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.OnDataResourceChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the data resource has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified object.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="toType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="P:Catel.Windows.Data.DataResourceBindingExtension.DataResource">
            <summary>
            Gets or sets the data resource.
            </summary>
            <value>The data resource.</value>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs">
            <summary>
            Provides data for a <see cref="T:Catel.Windows.Data.DependencyPropertyChangedHelper"/> implementation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.#ctor(System.String,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="e"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.DependencyProperty">
            <summary>
            Gets the dependency property that has changed.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.OldValue">
            <summary>
             Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.DependencyPropertyValueChangedEventArgs.NewValue">
            <summary>
            Gets the value of the property after the change.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.BindingHelper">
            <summary>
            Binding helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.GetBindingValue(System.Windows.FrameworkElement,System.Windows.Data.BindingBase)">
            <summary>
            Gets the binding value.
            </summary>
            <param name="frameworkElement">The dependency object.</param>
            <param name="binding">The binding.</param>
            <returns>The actual binding value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears a binding. This method implements the ClearBinding for both WPF and Silverlight.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property.</param>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyChangedHelper">
            <summary>
            Dependency property changed helper. This helper class allows to subscribe to any dependency property
            changed of any framework element element.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyChangedHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyChangedHelper._dependencyProperties">
            <summary>
            Cache containing already registered dependency properties.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyChangedHelper._wrapperDependencyProperties">
            <summary>
            Dictionary containing a dependency to real dependency name mapping.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.SubscribeToAllDependencyProperties(System.Windows.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Subscribes to all dependency properties of the specified <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="handler">The handler to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.UnsubscribeFromAllDependencyProperties(System.Windows.FrameworkElement,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Unsubscribes from all dependency properties of the specified <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="handler">The handler to unsubscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.SubscribeToDependencyProperty(System.Windows.FrameworkElement,System.String,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Subscribes to the specified dependency property of the specified <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">The name of the dependency property to subscribe to.</param>
            <param name="handler">The handler to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.UnsubscribeFromDependencyProperty(System.Windows.FrameworkElement,System.String,System.EventHandler{Catel.Windows.Data.DependencyPropertyValueChangedEventArgs})">
            <summary>
            Subscribes from the specified dependency property of the specified <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">The name of the dependency property to unsubscribe from.</param>
            <param name="handler">The handler to unsubscribe.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.OnDependencyPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a dependency property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.GetDependencyProperty``1(System.Windows.FrameworkElement,System.String)">
            <summary>
            Gets the dependency property from the cache. If it does not yet exist, it will create the dependency property and
            add it to the cache.
            </summary>
            <typeparam name="T">The type of the dependency property.</typeparam>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The dependency property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyChangedHelper.GetHandlerDependencyPropertyName(System.String)">
            <summary>
            Gets the name of the handler dependency property.
            </summary>
            <param name="propertyName">Name of the property.</param>`
            <returns>The name of the dependency property containing the changed handler for the actual dependency property.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="T:Catel.Windows.Data.DependencyPropertyHelper">
            <summary>
            Helper class for dependency properties.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyHelper._cacheByParentType">
            <summary>
            Cache containing all dependency properties of a specific type.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyHelper._cacheByPropertyName">
            <summary>
            Cache containing a dependency property based on the type + propertyname, where the key is generated using the
            <see cref="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyCacheKey(System.Windows.FrameworkElement,System.String)"/> method.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.DependencyPropertyHelper._cacheByDependencyProperty">
            <summary>
            Cache containing the names of all found dependency properties, required because it is not possible to get the name of a 
            dependency property in Silverlight and WP7.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyProperties(System.Windows.FrameworkElement)">
            <summary>
            Gets all dependency properties of the specified <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>List containing all dependency properties of the specified <see cref="T:System.Windows.FrameworkElement"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyByName(System.Windows.FrameworkElement,System.String)">
            <summary>
            Gets a the dependency property of a specific <see cref="T:System.Windows.FrameworkElement"/> by its name.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:System.Windows.DependencyProperty"/> or <c>null</c> if the property cannot be found.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyName(System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            Gets the name of the specified dependency property.
            </summary>
            <param name="frameworkElement">The framework element containing the dependency property.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <returns>The name of the dependency property or <c>null</c> if the name could not be found.</returns>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.GetDependencyPropertyCacheKey(System.Windows.FrameworkElement,System.String)">
            <summary>
            Gets the dependency property key for the cache.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The key to use in the cache.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.Data.DependencyPropertyHelper.EnsureItemInCache(System.Windows.FrameworkElement)">
            <summary>
            Ensures that the dependency properties of the specified <see cref="!:frameworkElement"/> are in the cache.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.ApplicationExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Application"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.ApplicationExtensions.GetActiveWindow(System.Windows.Application)">
            <summary>
            Gets the currently active window of the application.
            </summary>
            <param name="application">The application.</param>
            <returns>
            The active window of the application or null in case of none window is opened.
            </returns>
        </member>
        <member name="T:Catel.Windows.DependencyObjectExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.DependencyObject"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetAncestorObject``1(System.Windows.DependencyObject)">
            <summary>
            Returns the ancestory object of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <typeparam name="T">Ancestor object.</typeparam>
            <param name="visualObject">Visual object to get the ancestor object for.</param>
            <returns><see cref="T:System.Windows.DependencyObject"/> or null if no ancestor object is found.</returns>
            <remarks>
            	If visualObject was of type T it was returned as ancestor, this is changed.
            	GetAncestorObject wil not return supplied parameter anymore.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalOrVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical or visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestorByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the logical ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalRoot(System.Windows.DependencyObject)">
            <summary>
            Finds the logical root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestorByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the visual ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendant(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the visual descendant.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendantByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the visual descendant by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualRoot(System.Windows.DependencyObject)">
            <summary>
            Finds the visual root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Gets the visual children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> of all children.
            </returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.UpdateAllBindings(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Updates all the bindings of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="recursive">if set to <c>true</c>, the bindings will be updated recursively using the <see cref="T:System.Windows.Media.VisualTreeHelper"/>.</param>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetBindingExpressions(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Gets all the binding expressions of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="recursive">if set to <c>true</c>, the bindings will be searched recursively using the <see cref="T:System.Windows.Media.VisualTreeHelper"/>.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all bindings.
            </returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetDependencyProperties(System.Windows.DependencyObject)">
            <summary>
            Gets the dependency properties of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all dependency properties.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetAttachedProperties(System.Windows.DependencyObject)">
            <summary>
            Gets the attached properties of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all attached properties.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="T:Catel.Windows.FrameworkElementExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetForegroundWindow">
            <summary>
            The GetForegroundWindow function returns a handle to the foreground window.
            </summary>
        </member>
        <member name="F:Catel.Windows.FrameworkElementExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.BringWindowToTop(System.Windows.FrameworkElement)">
            <summary>
            Activates the window this framework element contains to.
            </summary>
            <param name="frameworkElement">Reference to the current <see cref="T:System.Windows.FrameworkElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.SetForegroundWindowEx(System.IntPtr)">
            <summary>
            Sets the foreground window (some "dirty" win32 stuff).
            </summary>
            <param name="hWnd">Handle of the window to set to the front.</param>
            <remarks>
            This method takes over the input thread for the window. This means that you are unable
            to debug the code between "Attach" and "Detach" since the input thread of Visual Studio
            will be attached to the thread of the application.
            </remarks>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetParentBindingGroup(System.Windows.FrameworkElement)">
            <summary>
            Get first parent binding group from specified element.
            </summary>
            <param name="frameworkElement">Reference to the current <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <returns>The first parent BindingGroup or null when not exists.</returns>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetParent(System.Windows.FrameworkElement)">
            <summary>
            Gets the parent. This method first tries to use the <see cref="P:System.Windows.FrameworkElement.Parent"/> property. If that is <c>null</c>,
            it will use the <see cref="P:System.Windows.FrameworkElement.TemplatedParent"/>. If that is <c>null</c>, this method assumes there is no
            parent and will return <c>null</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>The parent or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.UIElementExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.GetFocusedControl(System.Windows.UIElement)">
            <summary>
            Gets the focused control.
            </summary>
            <param name="element">The element to check and all childs.</param>
            <returns>The focused <see cref="T:System.Windows.UIElement"/> or <c>null</c> if none if the children has the focus.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.ContentElement,System.Boolean)">
            <summary>
            Focuses the first control on the ContentElement.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.ContentElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.UIElement,System.Boolean)">
            <summary>
            Focuses the first control on the UI Element.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Object,System.Boolean)">
            <summary>
            Focuses the first control on the UI Element.
            </summary>
            <param name="element">Reference to the current element.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusNextControl(System.Object,System.Boolean)">
            <summary>
            Focuses the next control on the UI Element.
            </summary>
            <param name="element">Element to focus the next control of.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.IInputElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.UIElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.ContentElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Object,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.InvalidateRect(System.Windows.UIElement)">
            <summary>
            Invalidates the rect as it is possible in win32.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.VisualExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Media.Visual"/>
            </summary>
        </member>
        <member name="F:Catel.Windows.VisualExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.VisualExtensions.DisableHardwareAcceleration(System.Windows.Media.Visual)">
            <summary>
            Disables the hardware acceleration for the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <remarks>
            When the visual is not yet loaded, this method tries to subscribe to the <c>Control.Loaded</c> event so disabled the 
            hardware acceleration as soon as the control is loaded.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visual"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.VisualExtensions.OnVisualLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a visual has been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.WindowExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.GWL_EXSTYLE">
            <summary>
            Extended windows styles.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.GWL_STYLE">
            <summary>
            Window styles.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.WS_SYSMENU">
            <summary>
            Shows or hides a system menu.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowByWindow(System.Windows.Window,System.Windows.Window,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowByHandle(System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.BringWindowToTop(System.Windows.Window)">
            <summary>
            Brings to specified window to top.
            </summary>
            <param name="window">The window to bring to top.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="window"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window. It will first try to set the owner via
            the <paramref name="ownerWindow"/>. If the <paramref name="ownerWindow"/> is not available,
            this method will use the <paramref name="ownerHandle"/> to set the parent.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="ownerWindow">New owner window.</param>
            <param name="ownerHandle">The owner handle.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.GetProcessMainWindowHandle">
            <summary>
            Returns the main window handle of the current process.
            </summary>
            <returns>Handle of the main window of the current process.</returns>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.HasOwner(System.Windows.Window)">
            <summary>
            Returns whether the window currently has an owner.
            </summary>
            <param name="window">Window to check.</param>
            <returns>
            True if the window has an owner, otherwise false.
            </returns>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.RemoveIcon(System.Windows.Window)">
            <summary>
            Removes the icon from the window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:Catel.Windows.WindowExtensions.RECT">
            <summary>
            RECT struct for platform invokation.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Catel.Windows.AutoDisposeAttribute">
            <summary>
            Auto diposes the properties that have this attribute when the property is declared.
            </summary>
            <remarks>
            The attribute itself only defines itself, but has no real implementation. The supported object that allows
            to use this object should implement the actual disposing.
            </remarks>
        </member>
        <member name="T:Catel.Windows.AutoDisposeHelper">
            <summary>
            Auto dispose helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.EnableAutoDisposeProperties(System.Windows.FrameworkElement)">
            <summary>
            Registers the AutoDisposeProperties call to the Unloaded event of the given element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.UnloadedWrapper(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the AutoDisposeProperties call.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.AutoDisposeProperties(System.Object)">
            <summary>
            Automatically disposes all properties of the object decorated with the <see cref="T:Catel.Windows.AutoDisposeAttribute"/>.
            </summary>
            <param name="obj">The object to dispose the properties of.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.AutoDisposeObject(System.Object)">
            <summary>
            Automatically disposes an object. If the object is an enumerable, all childs are disposed.
            </summary>
            <param name="obj">The object to dispose.</param>
        </member>
        <member name="T:Catel.Windows.EffectsHelper">
            <summary>
            Helper class for special window or framework effects.
            </summary>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.EffectsHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Dimm(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Dimms the specified framework element and sets the <see cref="P:System.Windows.UIElement.IsHitTestVisible"/> to <c>false</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Undimm(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Undimms the specified framework element and sets the <see cref="P:System.Windows.UIElement.IsHitTestVisible"/> to <c>true</c>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Blur(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Blurs the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.Unblur(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Unblurs the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.EffectsHelper.RunStoryboardWithCallback(System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Action)">
            <summary>
            Runs the storyboard with the completed callback.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="storyboardToRun">The storyboard to run.</param>
            <param name="completedDelegate">The completed delegate. If <c>null</c>, the callback will not be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="storyboardToRun"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.PopupHelper">
            <summary>
            Popup helper class to retrieve all the popups inside a windows application, which are not available
            via the regular <see cref="P:System.Windows.Application.Windows"/> property.
            </summary>
        </member>
        <member name="M:Catel.Windows.PopupHelper.GetAllPopups">
            <summary>
            Gets all the popups of the current application.
            </summary>
            <returns>The popups.</returns>
        </member>
        <member name="M:Catel.Windows.PopupHelper.FindAllPopups">
            <summary>
            Finds all the popups of the current application.
            </summary>
        </member>
        <member name="P:Catel.Windows.PopupHelper.Popups">
            <summary>
            Gets all the popups of the current application.
            </summary>
            <value>The popups.</value>
        </member>
        <member name="T:Catel.Windows.ResourceHelper">
            <summary>
            Resource helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.ResourceHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.EnsurePackUriIsAllowed">
            <summary>
            Ensures that the pack URI is allowed. Sometimes, when no application object is instantiated
            yet, the pack URI is not allowed. This method takes care of that.
            </summary>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.GetResourceUri(System.String,System.String)">
            <summary>
            Gets the resource URI for the specified resource and assembly name. The uri will
            be created like the following examples:
            <list type="bullet">
              <item>
                <description>pack://application:,,,/[RESOURCEURI]</description>
              </item>
              <item>
                <description>pack://application:,,,/[ASSEMBLY];component/[RESOURCEURI]</description>
              </item>
            </list>
            </summary>
            <param name="resourceUri">The resource URI.</param>
            <param name="shortAssemblyName">Name of the assembly. If <c>null</c> or empty, the current application will be used.
            If used, this must be the short name of the assembly.</param>
            <returns>The resource uri.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="resourceUri"/> is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.XamlPageExists(System.String)">
            <summary>
            Determines whether the specified uri is pointing to a valid xaml file.
            </summary>
            <returns><c>true</c> if the specified uri is pointing to a valid xaml file; otherwise <c>false</c>.</returns>
            <remarks>
            Note that the <paramref name="uriString"/> must be a valid resource URI. The <see cref="M:Catel.Windows.ResourceHelper.GetResourceUri(System.String,System.String)"/> can be used to
            easily create a resource URI.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="uriString"/> is <c>null</c> or whitespace.</exception>
            <exception cref="T:System.UriFormatException">The <paramref name="uriString"/> is not a valid uri.</exception>
        </member>
        <member name="M:Catel.Windows.ResourceHelper.XamlPageExists(System.Uri)">
            <summary>
            Determines whether the specified uri is pointing to a valid xaml file.
            </summary>
            <returns><c>true</c> if the specified uri is pointing to a valid xaml file; otherwise <c>false</c>.</returns>
            <remarks>
            Note that the <paramref name="uri"/> must be a valid resource URI. The <see cref="M:Catel.Windows.ResourceHelper.GetResourceUri(System.String,System.String)"/> can be used to
            easily create a resource URI.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="uri"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.VisualTargetPresentationSource">
            <summary>
            Support for multi-threaded host visuals.
            </summary>
            <remarks>
            The original code can be found here: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx.
            </remarks>
        </member>
        <member name="M:Catel.Windows.VisualTargetPresentationSource.#ctor(System.Windows.Media.HostVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.VisualTargetPresentationSource"/> class.
            </summary>
            <param name="hostVisual">The host visual.</param>
        </member>
        <member name="M:Catel.Windows.VisualTargetPresentationSource.GetCompositionTargetCore">
            <summary>
            When overridden in a derived class, returns a visual target for the given source.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.Media.CompositionTarget"/> that is target for rendering the visual.
            </returns>
        </member>
        <member name="P:Catel.Windows.VisualTargetPresentationSource.RootVisual">
            <summary>
            When overridden in a derived class, gets or sets the root visual being presented in the source.
            </summary>
            <value></value>
            <returns>
            The root visual.
            </returns>
        </member>
        <member name="P:Catel.Windows.VisualTargetPresentationSource.IsDisposed">
            <summary>
            When overridden in a derived class, gets a value that declares whether the object is disposed.
            </summary>
            <value></value>
            <returns>true if the object is disposed; otherwise, false.
            </returns>
        </member>
        <member name="T:Catel.Windows.WrapOptions">
            <summary>
            Available wrap options that can be used in the <see cref="T:Catel.Windows.WrapControlHelper"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateInlineInfoBarMessageControl">
            <summary>
            Generates an inline <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> around the element to wrap.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateOverlayInfoBarMessageControl">
            <summary>
            Generates an overlay <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> around the element to wrap.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateWarningAndErrorValidatorForDataContext">
            <summary>
            Generates a <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> for the data context.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.All">
            <summary>
            All available options.
            </summary>
        </member>
        <member name="T:Catel.Windows.WrapControlHelper">
            <summary>
            An helper to wrap controls and windows with several controls, such as the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.InternalGridName">
            <summary>
            The name of the internal grid. Retrieve the grid with this name to add custom controls to the inner grid.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.ButtonsWrapPanelName">
            <summary>
            The name of the wrap panel that contains the buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.MainContentHolderName">
            <summary>
            The name of the main content holder, used to prevent that an element is wrapped multiple times.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.InfoBarMessageControlName">
            <summary>
            The name of the info bar message control.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.WarningAndErrorValidatorName">
            <summary>
            The name of the warning and error validator control.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.DefaultOkButtonName">
            <summary>
            The name of the default ok button.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.DefaultCancelButtonName">
            <summary>
            The name of the default cancel button.
            </summary>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)">
            <summary>
            Determines whether the specified <see cref="T:System.Windows.FrameworkElement"/> can be safely wrapped.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Windows.FrameworkElement"/> can be safely wrapped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,System.Windows.Controls.UserControl)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            <para/>
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,System.Windows.Controls.ContentControl)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            <para/>
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[],System.Windows.Controls.ContentControl)">
            <summary>
            Wraps the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons to add.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns><see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.</returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[],System.Object)">
            <summary>
            Wraps the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons to add.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns><see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.</returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement``1(System.Windows.Controls.Grid,Catel.Windows.WrapOptions)">
            <summary>
            Gets a wrapped element mapped by the <paramref name="wrapOption"/>.
            </summary>
            <typeparam name="T">Type of the control to return.</typeparam>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="wrapOption">The wrap option that is used, which will be mapped to the control. The value <see cref="F:Catel.Windows.WrapOptions.All"/> is not allowed and will throw an exception.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="wrapOption"/> is <see cref="F:Catel.Windows.WrapOptions.All"/>.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement(System.Windows.Controls.Grid,Catel.Windows.WrapOptions)">
            <summary>
            Gets a wrapped element mapped by the <paramref name="wrapOption"/>.
            </summary>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="wrapOption">The wrap option that is used, which will be mapped to the control. The value <see cref="F:Catel.Windows.WrapOptions.All"/> is not allowed and will throw an exception.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="wrapOption"/> is <see cref="F:Catel.Windows.WrapOptions.All"/>.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement``1(System.Windows.Controls.Grid,System.String)">
            <summary>
            Gets a wrapped element by name.
            </summary>
            <typeparam name="T">Type of the control to return.</typeparam>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="controlName">Name of the control.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="controlName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="controlName"/> is not a valid control name.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement(System.Windows.Controls.Grid,System.String)">
            <summary>
            Gets a wrapped element by name.
            </summary>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="controlName">Name of the control.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="controlName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="controlName"/> is not a valid control name.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.SetControlContent(System.Object,System.Windows.FrameworkElement)">
            <summary>
            Sets the content of the control via reflection so all "special implementation differences"
            between WPF and Silverlight are now removed.
            </summary>
            <param name="contentControl">The content control.</param>
            <param name="element">The element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="contentControl"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Interactivity.AuthenticationAction">
            <summary>
            The available actions to perform when a user is not able to view a specific UI element.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Hide">
            <summary>
            Hides the associated control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Collapse">
            <summary>
            Collapses the associated control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.AuthenticationAction.Disable">
            <summary>
            Disables the associated control.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.Authentication">
            <summary>
            Authentication behavior to show/hide UI elements based on the some authentication parameters.
            </summary>
            <remarks>
            In Silverlight, the <c>IsEnabled</c> property is declared on <see cref="T:System.Windows.Controls.Control"/> instead of <see cref="T:System.Windows.FrameworkElement"/>. If the
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is not a <see cref="T:System.Windows.Controls.Control"/>, but the <see cref="P:Catel.Windows.Interactivity.Authentication.Action"/> is set to <see cref="F:Catel.Windows.Interactivity.AuthenticationAction.Disable"/>,
            a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.ActionProperty">
            <summary>
            Using a DependencyProperty as the backing store for Action.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Authentication.AuthenticationTagProperty">
            <summary>
            Using a DependencyProperty as the backing store for AuthenticationTag.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Authentication.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.InvalidOperationException">No instance of <see cref="T:Catel.MVVM.IAuthenticationProvider"/> is registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Catel.Windows.Interactivity.Authentication.Action"/> is set to <see cref="F:Catel.Windows.Interactivity.AuthenticationAction.Disable"/> and the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is not a <see cref="T:System.Windows.Controls.Control"/>.</exception>
        </member>
        <member name="P:Catel.Windows.Interactivity.Authentication.Action">
            <summary>
            Gets or sets the action to execute when the user has no access to the specified UI element.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Authentication.AuthenticationTag">
            <summary>
            Gets or sets the authentication tag which can be used to provide additional information to the <see cref="T:Catel.MVVM.IAuthenticationProvider"/>.
            </summary>
            <value>The authentication tag.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.DelayBindingUpdate">
            <summary>
            This behaviors sets the binding to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Explicit"/> and manually updates the
            binding from view to view model after the delay.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DelayBindingUpdate.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DelayBindingUpdate"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.ValidateRequiredProperties">
            <summary>
            Validates the required properties.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> has been unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnDependencyPropertyChanged(System.Object,Catel.Windows.Data.DependencyPropertyValueChangedEventArgs)">
            <summary>
            Called when the associated dependency property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when timer ticks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.UpdateBinding">
            <summary>
            Updates the binding value.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.GetDependencyProperty">
            <summary>
            Gets the dependency property based on the properties of this behavior.
            </summary>
            <returns>The <see cref="T:System.Windows.DependencyProperty"/> of <c>null</c> if the dependency property is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.GetDependencyProperty(System.String)">
            <summary>
            Gets the dependency property with the specified property name.
            </summary>
            <param name="dependencyPropertyName">Name of the property.</param>
            <returns>The <see cref="T:System.Windows.DependencyProperty"/> or <c>null</c> if the dependency property is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DelayBindingUpdate.CreateBindingCopy(System.Windows.Data.Binding)">
            <summary>
            Creates the binding copy.
            </summary>
            <param name="binding">The binding.</param>
            <returns>The duplicated binding.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.UpdateDelay">
            <summary>
              Gets or sets the update delay. 
              <para />
              This is the value that is used between updates in milliseconds. The binding will be updated
              after the delay. When a new value becomes available, the timer is reset and starts all over.
              <para />
              The default value is <c>100</c>. If the value is smaller than <c>50</c>, the value
              will be ignored and there will be no delay between the value change and binding update. If the
              value is higher than <c>5000</c>, it will be set to <c>5000</c>.
            </summary>
            <value>The update delay.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
            <remarks>
            This property does not reflect to any changes, so this property must be set when the 
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.DependencyPropertyName">
            <summary>
            Gets or sets the name of the dependency property. This property is used before the <see cref="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName"/>. By
            default, this behavior tries to retrieve the dependency property via "[PropertyName]Property" (which is the default
            naming convention of dependency properties). In the rare case that this naming convention is not followed, it is
            possible to use this property.
            </summary>
            <value>The name of the property.</value>
            <remarks>
            This property does not reflect to any changes, so this property must be set when the 
            <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            <para/>
            This property should only be used as backup if the <see cref="P:Catel.Windows.Interactivity.DelayBindingUpdate.PropertyName"/> property does not work.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.DelayBindingUpdate.UsedDependencyPropertyName">
            <summary>
            Gets the name of the used dependency property. This property is introduced because a <see cref="T:System.Windows.DependencyProperty"/> in Silverlight
            doesn't have a name.
            </summary>
            <value>The name of the used property or <c>null</c> if no property is used.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.DoubleClickToCommand">
            <summary>
            This behavior allows any element that supports a double click to command for every element
            that supports <c>MouseLeftButtonDown</c>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DoubleClickToCommand.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DoubleClickToCommand"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DoubleClickToCommand"/> class.
            </summary>
            <param name="action">The action to execute on double click. This is very useful when the behavior is added
            via code and an action must be invoked instead of a command.</param>
        </member>
        <member name="F:Catel.Windows.Interactivity.DoubleClickToCommand.CommandProperty">
            <summary>
            The property definition for the <see cref="P:Catel.Windows.Interactivity.DoubleClickToCommand.Command"/> dependency property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DoubleClickToCommand.CommandParameterProperty">
            <summary>
            The property definition for the <see cref="P:Catel.Windows.Interactivity.DoubleClickToCommand.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.DoubleClickToCommand.AutoFixListBoxItemTemplateProperty">
            <summary>
            The property definition for the <see cref="P:Catel.Windows.Interactivity.DoubleClickToCommand.AutoFixListBoxItemTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnMouseButtonDown(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> occurs.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DoubleClickToCommand.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.DoubleClickToCommand.Command">
            <summary>
            Gets or sets the command the execute when the associated object is being double-clicked.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DoubleClickToCommand.CommandParameter">
            <summary>
            Gets or sets the command parameter, which will override the parameter defined in the direct command binding.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DoubleClickToCommand.AutoFixListBoxItemTemplate">
            <summary>
            Gets or sets a value indicating whether to automatically fix the ItemTemplate in a ListBox.
            </summary>
            <value>
            	<c>true</c> if the ItemTemplate in a ListBox should automatically be fixed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.DragDrop">
            <summary>
            An attached behavior that allows you to drag and drop items among various ItemsControls, e.g. ItemsControl, ListBox, TabControl, etc.
            </summary>
            <remarks>
            This code was originally found at http://wpfbehaviorlibrary.codeplex.com/, which is based on http://gallery.expression.microsoft.com/DragDropBehavior/.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDrop.AddItem(System.Windows.Controls.ItemsControl,System.Object,System.Int32)">
            <summary>
            Called when an item is added to <paramref name="itemsControl"/>.
            </summary>
            <param name="itemsControl">The items control <paramref name="item"/> is to be added to.</param>
            <param name="item">The item to be added.</param>
            <param name="insertIndex">Index <paramref name="item"/> should be inserted at.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDrop.RemoveItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Removes the item from <paramref name="itemsControl"/>.
            </summary>
            <param name="itemsControl">The items control to remove <paramref name="itemToRemove"/> from.</param>
            <param name="itemToRemove">The item to remove.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDrop.CanDrag(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Determines whether <paramref name="item"/> can be dragged from or within the specified items control.
            </summary>
            <param name="itemsControl">The drag source.</param>
            <param name="item">The item to be dragged.</param>
            <returns>
            	<c>true</c> if <paramref name="item"/> can be dragged; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDrop.CanDrop(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Determines whether <paramref name="item"/> can be dropped onto the specified items control.
            </summary>
            <param name="itemsControl">The drop target.</param>
            <param name="item">The item that would be dropped.</param>
            <returns>
            	<c>true</c> if <paramref name="item"/> can be dropped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDrop.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDrop.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.DragDrop.ItemType">
            <summary>
            Gets or sets the type of the items in the ItemsControl. 
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DragDrop.DataTemplate">
            <summary>
            Gets or sets the data template of the items to use while dragging. 
            </summary>
            <value>The data template.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.DragDrop.DropIndication">
            <summary>
            Gets or sets the drop indication.
            </summary>
            <value>The drop indication.</value>
            <remarks>The default is vertical.</remarks>
        </member>
        <member name="T:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner">
            <summary>
            Handles the visual display of the item as it's being dragged
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.#ctor(System.Object,System.Windows.DataTemplate,System.Windows.UIElement,System.Windows.Documents.AdornerLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner"/> class.
            </summary>
            <param name="data">The data that's being dragged.</param>
            <param name="dataTemplate">The data template to show while dragging.</param>
            <param name="adornedElement">The adorned element.</param>
            <param name="adornerLayer">The adorner layer.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Implements any custom measuring behavior for the adorner.
            </summary>
            <param name="constraint">A size to constrain the adorner to.</param>
            <returns>
            A <see cref="T:System.Windows.Size"/> object representing the amount of layout space needed by the adorner.
            </returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.UpdatePosition(System.Double,System.Double)">
            <summary>
            Updates the position of the adorner relative to the adorner layer.
            </summary>
            <param name="left">The offset from the left.</param>
            <param name="top">The offset from the top.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Returns a <see cref="T:System.Windows.Media.Transform"/> for the adorner, based on the transform that is currently applied to the adorned element.
            </summary>
            <param name="transform">The transform that is currently applied to the adorned element.</param>
            <returns>A transform to apply to the adorner.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.DragDropHelpers.DragAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Catel.Windows.Interactivity.DragDropHelpers.DropAdorner">
            <summary>
            Handles the visual indication of the drop point
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DropAdorner.#ctor(System.Boolean,System.Boolean,System.Windows.UIElement,System.Windows.Documents.AdornerLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.DragDropHelpers.DropAdorner"/> class.
            </summary>
            <param name="isTopHalf">if set to <c>true</c> we are adorning the top half of the item.</param>
            <param name="drawHorizontal">if set to <c>true</c> the item being adorned has a horizontal orientation.</param>
            <param name="adornedElement">The adorned element.</param>
            <param name="adornerLayer">The adorner layer.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DropAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DropAdorner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.DragDropHelpers.DropAdorner.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Catel.Windows.Interactivity.EventToCommand">
            <summary>
            Class to convert a routed event to a command.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.TriggerActionBase`1">
            <summary>
            TriggerAction base class that handles a safe unsubscribe and clean up because the default
            TriggerAction class does not always call <see cref="M:System.Windows.Interactivity.TriggerAction.OnDetaching"/>.
            <para/>
            This class also adds some specific features such as <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.ValidateRequiredProperties"/>
            which is automatically called when the trigger action is attached.
            </summary>
            <typeparam name="T">The <see cref="T:System.Windows.UIElement"/> this trigger action should attach to.</typeparam>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This method is called when the object is attached, but before
            the <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.Initialize"/> is invoked.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.Initialize">
            <summary>
            Initializes the trigger action. This method is called instead of the <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAttached"/> which is sealed
            to protect the additional trigger action.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.Uninitialize">
            <summary>
            Uninitializes the behavior. This method is called when <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnDetaching"/> is called, or when the
            <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is unloaded.
            <para/>
            If dependency properties are used, it is very important to use <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"/> 
            to clear the value
            of the dependency properties in this method.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is loaded. This method is introduced to prevent
            double initialization when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is already loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is unloaded. This method is introduced to prevent
            double uninitialization when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is already unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerActionBase`1.CleanUp">
            <summary>
            Actually cleans up the trigger action because <see cref="M:Catel.Windows.Interactivity.TriggerActionBase`1.OnDetaching"/> is not always called.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.TriggerActionBase`1.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the <see cref="!:TriggerActionBase&lt;T&gt;.AssociatedObject"/> is loaded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="!:TriggerActionBase&lt;T&gt;.AssociatedObject"/> is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.EventToCommand"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.DisableAssociatedObjectOnCannotExecuteProperty">
            <summary>
            DependencyProperty definition as the backing store for DisableAssociatedObjectOnCannotExecute.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.CommandProperty">
            <summary>
            DependencyProperty definition as the backing store for Command.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.CommandParameterProperty">
            <summary>
            DependencyProperty definition as the backing store for CommandParameter.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.EventToCommand.ModifiersProperty">
            <summary>
            Using a DependencyProperty as the backing store for Modifiers.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnDisableAssociatedObjectOnCannotExecuteChanged(System.Boolean)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.EventToCommand.DisableAssociatedObjectOnCannotExecute"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnCommandChanged(System.Windows.Input.ICommand)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.EventToCommand.Command"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnCommandParameterChanged(System.Object)">
            <summary>
            Called when the <see cref="P:Catel.Windows.Interactivity.EventToCommand.CommandParameter"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>CanExecute</c> state of a command has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.Invoke">
            <summary>
            Invokes the action without any parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.IsAssociatedObjectDisabled">
            <summary>
            Checks whether the associated object is disabled or not.
            </summary>
            <returns><c>true</c> if the associated object is disabled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.UpdateElementState">
            <summary>
            Updates the state of the associated element.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the associated object is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.SubscribeToCommand">
            <summary>
            Subscribes to the command.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.EventToCommand.UnsubscribeFromCommand">
            <summary>
            Unsubscribes from the command.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.PassEventArgsToCommand">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.EventArgs"/> passed to the event handler
            should be passed to the command as well.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.EventArgs"/> passed to the event handler should be passed to the command; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.PreventInvocationIfAssociatedObjectIsDisabled">
            <summary>
            Gets or sets a value indicating whether the invocation of the command should be prevented when the
            <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is disabled.
            <para/>
            By default, this value is <c>true.</c>
            <para/>
            This property is introduced to disable the default behavior. For example, when showing a window which will disable
            the underlying object, the command will no longer be invoked. While this is the recommended behavior in most cases,
            sometimes you just need to bypass the default functionality.
            </summary>
            <value><c>true</c> if the invocation of the command should be prevented when the <see cref="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject"/> is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.DisableAssociatedObjectOnCannotExecute">
            <summary>
            Gets or sets a value indicating whether the associated object should be disabled when the command
            cannot be executed.
            </summary>
            <remarks>
            Wrapper for the DisableAssociatedObjectOnCannotExecute dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.Command">
            <summary>
            Gets or sets the associated Command.
            </summary>
            <remarks>
            Wrapper for the Command dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
            <remarks>
            Wrapper for the CommandParameter dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Interactivity.EventToCommand.Modifiers">
            <summary>
            Gets or sets the modifiers to check for.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.FocusMoment">
            <summary>
            Available moments on which the focus can be set.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.Loaded">
            <summary>
            Focus when the control is loaded.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.PropertyChanged">
            <summary>
            Focus when a property has changed.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.FocusMoment.Event">
            <summary>
            Focus when a specific event occurs.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.Focus">
            <summary>
            Behavior to set focus to a <see cref="T:System.Windows.FrameworkElement"/>. This behavior sets the focus
            only once on the first time the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <remarks>In Silverlight, focusing a control seems very, very hard. Just calling Focus() isn't enough, so a timer is used to set the timer 500 milliseconds after the
            user control has been loaded. This is customizable via the <see cref="P:Catel.Windows.Interactivity.Focus.FocusDelay"/> property.</remarks>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.Focus"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.FocusDelayProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusDelay.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.FocusMomentProperty">
            <summary>
            Using a DependencyProperty as the backing store for FocusMoment.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.SourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for Source.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.Focus.PropertyNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for PropertyName.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourceEventOccurred(System.Object,System.EventArgs)">
            <summary>
            Called when the event on the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> has occurred.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnSourceChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SourceChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.StartFocus">
            <summary>
            Starts the focus.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="!:Tick"/> event occurs on the timer.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.Focus.SetFocus">
            <summary>
            Sets the focus to the assoicated object.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.FocusDelay">
            <summary>
            Gets or sets the focus delay. If smaller than 25, no delay will be used. If larger than 5000, it will be set to 5000.
            <para />
            The default value in WPF is <c>0</c>. The default value in Silverlight is <c>500</c>.
            </summary>
            <value>The focus delay.</value>
            <example>
            </example>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.FocusMoment">
            <summary>
            Gets or sets the focus moment.
            <para/>
            When this value is <see cref="!:FocusMoment.Loaded"/>, no other properties need to be set.
            <para/>
            When this value is <see cref="!:FocusMoment.PropertyChanged"/>, both the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> and 
            <see cref="P:Catel.Windows.Interactivity.Focus.PropertyName"/> must be set.
            <para/>
            When this value is <see cref="!:FocusMoment.Event"/>, both the <see cref="P:Catel.Windows.Interactivity.Focus.Source"/> and 
            <see cref="P:Catel.Windows.Interactivity.Focus.EventName"/> must be set.
            </summary>
            <value>The focus moment.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.Source">
            <summary>
            Gets or sets the source. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment"/> property is either 
            <see cref="!:FocusMoment.PropertyChanged"/> or <see cref="!:FocusMoment.Event"/>.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.PropertyName">
            <summary>
            Gets or sets the name of the property. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment"/> property is 
            <see cref="!:FocusMoment.PropertyChanged"/>.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.Focus.EventName">
            <summary>
            Gets or sets the name of the event. This value is required when the <see cref="P:Catel.Windows.Interactivity.Focus.FocusMoment"/> property is 
            <see cref="!:FocusMoment.Event"/>.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.KeyPressToCommand">
            <summary>
            Behavior that converts a key press on a specific UI element to a command.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.KeyProperty">
            <summary>
            Using a DependencyProperty as the backing store for Key.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.ModifiersProperty">
            <summary>
            Using a DependencyProperty as the backing store for Modifiers.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.KeyPressToCommand.CommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for Command.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.KeyPressToCommand.OnKeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the specified key is pressed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.KeyPressToCommand.Key">
            <summary>
            Gets or sets the key to which the behavior should respond.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.KeyPressToCommand.Modifiers">
            <summary>
            Gets or sets the modifiers to check for.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:Catel.Windows.Interactivity.KeyPressToCommand.Command">
            <summary>
            Gets or sets the command to execute when the key is pressed.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:Catel.Windows.Interactivity.MouseInfo">
            <summary>
            Trigger that enables a property to bind the several mouse events for the associated object.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.MouseInfo.IsMouseOverProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsMouseOver.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Called when the mouse enters the associated object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.MouseInfo.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Called when the mouse leaves the associated object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Interactivity.MouseInfo.IsMouseOver">
            <summary>
            Gets or sets a value indicating whether the mouse is currently over the associated object.
            </summary>
            <value>
            	<c>true</c> if the mouse is currently over the associated object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.NumericTextBox">
            <summary>
            Behavior to only allow numeric input on a <see cref="T:System.Windows.Controls.TextBox"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.NumericTextBox.IsNegativeAllowedProperty">
            <summary>
            Are negative numbers allowed
            </summary>
        </member>
        <member name="F:Catel.Windows.Interactivity.NumericTextBox.IsDecimalAllowedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDecimalAllowed.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.OnAssociatedObjectKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.KeyDown"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>        
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.OnAssociatedObjectTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when the <see cref="!:TextBox.TextChanged"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.IsDigit(System.Windows.Input.Key)">
            <summary>
            Determines whether the specified key is a digit.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key is digit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Interactivity.NumericTextBox.GetKeyValue(System.Windows.Input.KeyEventArgs)">
            <summary>
            Gets the Key to a string value.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="P:Catel.Windows.Interactivity.NumericTextBox.IsNegativeAllowed">
            <summary>
            Gets or sets a value indicating whether negative values are allowed.
            </summary>
            <value>
              <c>true</c> if [allow negative]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Interactivity.NumericTextBox.IsDecimalAllowed">
            <summary>
            Gets or sets a value indicating whether decimal values are allowed.
            </summary>
            <value>
              <c>true</c> if [IS decimal allowed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.SelectTextOnFocus">
            <summary>
            Selects all the text when the <see cref="T:System.Windows.Controls.TextBox"/> is focused.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnPreviewMouseLeftButtonDown(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnGotMouseCapture(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.GotMouseCapture"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.OnGotKeyboardFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.GotKeyboardFocus"/> event occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.SelectTextOnFocus.SelectAllText">
            <summary>
            Selects all the text in the associated object.
            </summary>
        </member>
        <member name="T:Catel.Windows.Interactivity.TriggerBase`1">
            <summary>
            Trigger base class that handles a safe unsubscribe and clean up because the default
            Trigger class does not always call <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching"/>.
            <para/>
            This class also adds some specific features such as <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.ValidateRequiredProperties"/>
            which is automatically called when the trigger is attached.
            </summary>
            <typeparam name="T">The <see cref="T:System.Windows.FrameworkElement"/> this trigger should attach to.</typeparam>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.ValidateRequiredProperties">
            <summary>
            Validates the required properties. This method is called when the object is attached, but before
            the <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.Initialize"/> is invoked.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.Initialize">
            <summary>
            Initializes the trigger action. This method is called instead of the <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnAttached"/> which is sealed
            to protect the additional trigger action.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.Uninitialize">
            <summary>
            Uninitializes the behavior. This method is called when <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching"/> is called, or when the
            <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded.
            <para/>
            If dependency properties are used, it is very important to use <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"/> 
            to clear the value of the dependency properties in this method.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectLoadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is loaded. This method is introduced to prevent
            double initialization when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is already loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectUnloadedInternal(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded. This 
            method is introduced to prevent double uninitialization when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is already unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.TriggerBase`1.CleanUp">
            <summary>
            Actually cleans up the trigger action because <see cref="M:Catel.Windows.Interactivity.TriggerBase`1.OnDetaching"/> is not always called.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.TriggerBase`1.IsAssociatedObjectLoaded">
            <summary>
            Gets a value indicating whether the <see cref="!:TriggerBase&lt;T&gt;.AssociatedObject"/> is loaded.
            </summary>
            <value>
            	<c>true</c> if the <see cref="!:TriggerBase&lt;T&gt;.AssociatedObject"/> is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.Interactivity.UpdateBindingOnTextChanged">
            <summary>
              This behavior automatically updates the binding of a <see cref="T:System.Windows.Controls.TextBox"/> when the
              <see cref="!:TextBox.TextChanged"/> event occurs.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Catel.Windows.Interactivity.UpdateBindingOnTextChanged"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectLoaded(System.Object,System.EventArgs)">
            <summary>
              Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectUnloaded(System.Object,System.EventArgs)">
            <summary>
              Called when the <see cref="P:System.Windows.Interactivity.Behavior`1.AssociatedObject"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnAssociatedObjectTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
              Called when the <see cref="!:TextBox.TextChanged"/> occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
              Called when timer ticks.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.UpdateBinding">
            <summary>
              Updates the binding value.
            </summary>
        </member>
        <member name="P:Catel.Windows.Interactivity.UpdateBindingOnTextChanged.UpdateDelay">
            <summary>
              Gets or sets the update delay. 
              <para />
              This is the value that is used between updates in milliseconds. The binding will be updated
              when no new text change event is detected within the delay.
              <para />
              The default value is <c>250</c>. If the value is smaller than <c>50</c>, the value
              will be ignored and there will be no delay between the key down and the binding update. If the
              value is higher than <c>5000</c>, it will be set to <c>5000</c>.
            </summary>
            <value>The update delay.</value>
        </member>
        <member name="T:Catel.Windows.Threading.DispatcherHelper">
            <summary>
            Dispatcher helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Threading.DispatcherHelper.DoEvents">
            <summary>
            Processes all UI messages currently in the message queue.
            </summary>
        </member>
        <member name="P:Catel.Windows.Threading.DispatcherHelper.CurrentDispatcher">
            <summary>
            Gets the current dispatcher. This property is compatible with WPF, SL and WP7, and also works
            when there is no application object (for example, during unit tests).
            </summary>
            <value>The current dispatcher.</value>
        </member>
        <member name="T:Catel.Windows.DataWindowMode">
            <summary>
            Mode of the <see cref="T:Catel.Windows.DataWindow"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.OkCancel">
            <summary>
            Window contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.OkCancelApply">
            <summary>
            Window contains OK, Cancel and Apply buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.Close">
            <summary>
            Window contains Close button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.Custom">
            <summary>
            Window contains custom buttons.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindowDefaultButton">
            <summary>
            Available default buttons on the data window mode.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.Apply">
            <summary>
            Apply button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.Close">
            <summary>
            Close button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.None">
            <summary>
            No button.
            </summary>
        </member>
        <member name="T:Catel.Windows.InfoBarMessageControlGenerationMode">
            <summary>
            Defines the way the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> is included in the <see cref="T:Catel.Windows.DataWindow"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.None">
            <summary>
            No <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> is generated.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.Inline">
            <summary>
            Generate the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> as inline.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.Overlay">
            <summary>
            Generate the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> as overlay.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindow">
            <summary>
            <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> and
            the default buttons, according to the <see cref="T:Catel.Windows.DataWindowMode"/>.
            </summary>
        </member>
        <member name="T:Catel.Windows.IDataWindow">
            <summary>
            Interface defining functionality for the <see cref="T:Catel.Windows.DataWindow"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindow.Offset">
            <summary>
            Offset of the window to the sides of the primary monitor.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindow.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            <para/>
            Registers the <see cref="T:Catel.MVVM.IViewModelLocator"/> in the <see cref="T:Catel.IoC.IServiceLocator"/> if it is not yet registered.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement"/> class.
            </summary>
            <remarks>
            This method is required for design time support.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of this class with custom commands.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <remarks>
            Explicit constructor with view model injection, required for <see cref="M:System.Activator.CreateInstance(System.Type)"/> which
            does not seem to support default parameter values.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteOk">
            <summary>
            Executes the OK command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnOkCanExecute">
            <summary>
            Determines whether the user can execute the OK command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnOkExecute">
            <summary>
            Handled when the user invokes the OK command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteCancel">
            <summary>
            Executes the Cancel command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCancelCanExecute">
            <summary>
            Determines whether the user can execute the Cancel command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCancelExecute">
            <summary>
            Handled when the user invokes the Cancel command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteApply">
            <summary>
            Executes the Apply command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnApplyCanExecute">
            <summary>
            Determines whether the user can execute the Apply command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnApplyExcute">
            <summary>
            Handled when the user invokes the Apply command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteClose">
            <summary>
            Executes the Close command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCloseCanExecute">
            <summary>
            Determines whether the user can execute the Close command.
            </summary>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCloseExecute">
            <summary>
            Handled when the user invokes the Close command.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.SetDialogResult(System.Nullable{System.Boolean})">
            <summary>
            Sets the <see cref="P:System.Windows.Window.DialogResult"/>, but keeps track of whether the <see cref="P:System.Windows.Window.DialogResult"/> can
            actually be set. For example, dialogs which are not called with <see cref="M:System.Windows.Window.ShowDialog"/> can not set the
            <see cref="P:System.Windows.Window.DialogResult"/>.
            </summary>
            <param name="result">The result.</param>
            <returns><c>true</c> if the <see cref="P:System.Windows.Window.DialogResult"/> is set correctly. Otherwise <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnButtonReceivedFocus(System.Object,System.EventArgs)">
            <summary>
            Called when a button has received the focus.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.HandleDefaultButton">
            <summary>
            Handles the default button, which can be done via a key event (enter).
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.AddCustomButton(Catel.Windows.DataWindowButton)">
            <summary>
            Adds a custom button to the list of buttons.
            </summary>
            <param name="dataWindowButton">The data window button.</param>
            <exception cref="T:System.InvalidOperationException">The <paramref name="dataWindowButton"/> is added when the window is already loaded.</exception>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnContentChanged(System.Object,System.Object)">
            <summary>
            Invoked when the content of this control has been changed. This method will add the dynamic controls automatically.
            </summary>
            <param name="oldContent">Old content.</param>
            <param name="newContent">New content.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnInternalGridChanged">
            <summary>
            Called when the internal grid has changed.
            </summary>
            <remarks>
            This method is only invoked when the grid is set, not when the grid is cleared (which is something that should never happen).
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.EnableWindowOffset(System.EventArgs)">
            <summary>
            Enables the window offset as it was used before Catel 1.3. To support the maximized state,
            the default is removed.
            <para />
            If you want to have an offset for non-maximized windows, either call this method or set the
            <c>MaxWidth</c> and <c>MaxHeight</c> properties.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnDataWindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Closing event of the DataWindow control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.Initialize">
            <summary>
            Initializes the window.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current view model has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current <see cref="P:Catel.Windows.DataWindow.ViewModel"/> has changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnViewModelClosed(System.Object,Catel.MVVM.ViewModelClosedEventArgs)">
            <summary>
            Called when the <see cref="P:Catel.Windows.DataWindow.ViewModel"/> has been closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.GetViewModelType">
            <summary>
            Gets the type of the view model. If this method returns <c>null</c>, the view model type will be retrieved by naming 
            convention using the <see cref="T:Catel.MVVM.IViewModelLocator"/> registered in the <see cref="T:Catel.IoC.IServiceLocator"/>.
            </summary>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.GetViewModelType(System.Object)">
            <summary>
            Gets the type of the view model at runtime based on the <see cref="P:System.Windows.FrameworkElement.DataContext"/>. If this method returns 
            <c>null</c>, the earlier determined view model type will be used instead.
            </summary>
            <param name="dataContext">The data context. This value can be <c>null</c>.</param>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
            <remarks>
            Note that this method is only called when the <see cref="P:System.Windows.FrameworkElement.DataContext"/> changes.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.GetViewModelInstance(System.Object)">
            <summary>
            Gets the instance of the view model at runtime based on the <see cref="P:System.Windows.FrameworkElement.DataContext"/>. If this method returns 
            <c>null</c>, the logic will try to construct the view model by itself.
            </summary>
            <param name="dataContext">The data context. This value can be <c>null</c>.</param>
            <returns>The instance of the view model or <c>null</c> in case it should be auto created.</returns>
            <remarks>
            Note that this method is only called when the <see cref="P:System.Windows.FrameworkElement.DataContext"/> changes.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnViewModelChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.DataWindow.ViewModel"/> has changed.
            </summary>
            <remarks>
            This method does not implement any logic and saves a developer from subscribing/unsubscribing
            to the <see cref="E:Catel.Windows.DataWindow.ViewModelChanged"/> event inside the same user control.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnLoaded(System.EventArgs)">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is loaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnUnloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnUnloaded(System.EventArgs)">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is unloaded.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="P:Catel.Windows.DataWindow.ViewModelType">
            <summary>
            Gets the type of the view model that this user control uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.DataWindow.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.Mode">
            <summary>
            Gets the <see cref="T:Catel.Windows.DataWindowMode"/> that this window uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.DataWindow.CanClose">
            <summary>
            Gets or sets a value indicating whether this instance can close.
            </summary>
            <value><c>true</c> if this instance can close; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.Commands">
            <summary>
            Gets the commands that are currently available on the data window.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.DefaultButton">
            <summary>
            Gets the default button.
            </summary>
            <value>The default button.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsOKButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is OK button available.
            </summary>
            <value>
            	<c>true</c> if this instance is OK button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsCancelButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is cancel button available.
            </summary>
            <value>
            	<c>true</c> if this instance is cancel button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsApplyButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is apply button available.
            </summary>
            <value>
            	<c>true</c> if this instance is apply button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsCloseButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is close button available.
            </summary>
            <value>
            	<c>true</c> if this instance is close button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.ClosedByButton">
            <summary>
            Gets or sets a value indicating whether the window was closed by a 'user'-button.
            </summary>
            <value><c>true</c> if closed by button; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.InternalGrid">
            <summary>
            Gets the internal grid. This control gives internal classes a change to add additional controls to
            the dynamically created grid.
            </summary>
            <value>The internal grid.</value>
        </member>
        <member name="E:Catel.Windows.DataWindow.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.DataWindow.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.DataWindow.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="E:Catel.Windows.DataWindow.ViewModelPropertyChanged">
            <summary>
            Occurs when a property on the <see cref="P:Catel.Windows.DataWindow.ViewModel"/> has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindow`1">
            <summary>
            <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> and
            the default buttons, according to the <see cref="T:Catel.Windows.DataWindowMode"/>. Also supports MVVM out
            of the box by using the <see cref="T:Catel.MVVM.ViewModelBase"/>.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow`1"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <remarks>
            Explicit constructor with view model injection, required for <see cref="M:System.Activator.CreateInstance(System.Type)"/> which
            does not seem to support default parameter values.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.GetViewModelType">
            <summary>
            Gets the type of the view model. If this method returns <c>null</c>, the view model type will be retrieved by naming convention.
            </summary>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.DataWindow`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="T:Catel.Windows.DataWindowButton">
            <summary>
            Information for a button that should be generated.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="execute">The execute delegate.</param>
            <param name="canExecute">The can execute delegate.</param>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Windows.Input.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="bindingPath">The binding path expression of the command to bind to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bindingPath"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.Text">
            <summary>
            Gets the text as it is displayed on the button.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.Command">
            <summary>
            Gets the command associated with this button.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.CommandBindingPath">
            <summary>
            Gets the command binding path.
            </summary>
            <value>The command binding path.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.IsDefault">
            <summary>
            Gets or sets a value indicating whether this button is the default button.
            </summary>
            <value>
            	<c>true</c> if this button is the default button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.IsCancel">
            <summary>
            Gets or sets a value indicating whether this button is the cancel button.
            </summary>
            <value>
            	<c>true</c> if this button is the cancel button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.LoaderAnimation">
            <summary>
            Contains a loader animation for the WaitWindow
            </summary>
            <summary>
            LoaderAnimation
            </summary>
        </member>
        <member name="M:Catel.Windows.LoaderAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.LoaderAnimation"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.LoaderAnimation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper">
            <summary>
            PleaseWait window Helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitHelper.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.PleaseWaitHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.Windows.PleaseWaitHelper.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(System.String,System.Int32,System.Int32)">
            <summary>
            Shows the specified status.
            </summary>
            <param name="statusFormat">The status format.</param>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.ComponentModel.RunWorkerCompletedEventHandler,System.String,System.Double)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed. This method will also subscribe to the
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="runWorkerCompletedDelegate">The run worker completed delegate.</param>
            <param name="status">The status.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String,System.Int32,System.Int32)">
            <summary>
            Updates the status text.
            </summary>
            <param name="statusFormat">The status format.</param>
            <param name="currentItem">The current item.</param>
            <param name="totalItems">The total items.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Hide">
            <summary>
            Hides the Please Wait window.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatusText(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="text">The text.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.ShowWindow(System.Int32)">
            <summary>
            Shows the window delayed by using the <see cref="P:Catel.Windows.PleaseWaitHelper.MinimumDurationBeforeShow"/>.
            </summary>
            <param name="percentage">The percentage. If <c>-1</c>, the window is assumed to be indeterminate.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.HideWindow">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.Instance">
            <summary>
            Gets the instance of this singleton class.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow">
            <summary>
            Gets or sets the <see cref="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow"/> instance.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.MinimumDurationBeforeShow">
            <summary>
            Gets or sets the minimum duration in milliseconds that an operation must take before the window is actually shown.
            </summary>
            <value>The minimum duration in milliseconds that an operation must take before the window is actually shown.</value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.MinimumShowTime">
            <summary>
            Gets or sets the minimum show time in milliseconds.
            </summary>
            <value>The minimum show time in milliseconds.</value>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper.HideWindowDelegate">
            <summary>
            Delegate that allows this class to re-invoke the HideWindow method.
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper.UpdateStatusTextDelegate">
            <summary>
            Delegate to update the status text of the <see cref="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow"/>.
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitMode">
            <summary>
            The action that the <see cref="T:Catel.Windows.PleaseWaitWindow"/> should take when it becomes visible.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitMode.Dimm">
            <summary>
            Dimm the parent window.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitMode.Blur">
            <summary>
            Blur the parent window.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitMode.Nothing">
            <summary>
            Don't do anything.
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitWindow">
            <summary>
            Please wait window to show a please wait window with the option to customize the text.
            </summary>
            <remarks>
            Parts of this code comes from this blog: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx.
            </remarks>
            <summary>
            PleaseWaitWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.PleaseWaitWindow"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.PleaseWaitWindow"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#ctor(System.String)">
            <summary>
            Initializes a please wait window with default text.
            </summary>
            <param name="text">Text to display in the window.</param>
        </member>
        <member name="F:Catel.Windows.PleaseWaitWindow.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitWindow.PercentageProperty">
            <summary>
            Using a DependencyProperty as the backing store for Percentage.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitWindow.IsIndeterminateProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsIndeterminate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.ChangeMode(System.Boolean)">
            <summary>
            Changes the mode of all windows of the application.
            </summary>
            <param name="dimm">if set to <c>true</c>, all windows should be dimmed.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.ChangeMode(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},System.Boolean)">
            <summary>
            Changes the dimming.
            </summary>
            <param name="elements">The framework elements.</param>
            <param name="dimm">if set to <c>true</c>, all windows should be dimmed.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the window is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the layout of the window is updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.CreateMediaElementsOnWorkerThread">
            <summary>
            Creates the media element on worker thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.OnlyDimmOwnerWindow">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Catel.Windows.PleaseWaitWindow"/> should only dimm the owner window.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if if only the owner window should be dimmed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.DoNotDimmPopups">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Catel.Windows.PleaseWaitWindow"/> should not dimm popups. This
            value is only used when <see cref="P:Catel.Windows.PleaseWaitWindow.OnlyDimmOwnerWindow"/> is <c>false</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if if only the owner window should be dimmed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.Mode">
            <summary>
            Gets or sets the mode.
            <para/>
            The default value is <see cref="F:Catel.Windows.PleaseWaitMode.Blur"/>.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.Percentage">
            <summary>
            Gets or sets the percentage.
            </summary>
            <value>The percentage.</value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether this instance is indeterminate.
            </summary>
            <value>
            	<c>true</c> if this instance is indeterminate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.IsOwnerDimmed">
            <summary>
            Gets or sets a value indicating whether this instance is dimmed.
            </summary>
            <value><c>true</c> if this instance is dimmed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.Controls.Page`1">
            <summary>
            Generic implementation of the <see cref="T:Catel.Windows.Controls.Page"/> class that supports MVVM with Catel.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <remarks>
            Starting with Catel 3.0, the <see cref="T:Catel.Windows.Controls.Page`1"/> now derives from <see cref="T:Catel.Windows.Controls.Page"/> and should
            only be used when there is an actual need to specify the class as a generic. Otherwise, it is always recommend to use the
            new <see cref="T:Catel.Windows.Controls.Page"/> which is not generic and can determine the view model by itself.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.Page`1.GetViewModelType">
            <summary>
            Gets the type of the view model. If this method returns <c>null</c>, the view model type will be retrieved by naming convention.
            </summary>
            <returns>The type of the view model or <c>null</c> in case it should be auto determined.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Catel.Windows.Controls.Page`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
    </members>
</doc>
